{
    "docs": [
        {
            "location": "/",
            "text": "clove \n\n\nversion number: 1.1.1\n\n\nOverview\n\n\nClove is a library that makes atomic swaps between chains easy.\n\n\nDocumentation available at \nlamden.github.io/clove\n.\n\n\nInstallation\n\n\nTo install use pip:\n\n\n$ pip install clove\n\n\n\nOr clone the repo:\n\n\n$ git clone https://github.com/Landen/clove.git\n$ python setup.py install\n\n\n\nDevelopment\n\n\nGetting started\n\n\n$ git clone https://github.com/Landen/clove.git\n$ cd clove\n$ virtualenv venv --python=python3.6\n$ . venv/bin/activate\n$ python setup.py develop\n\n\n\nRunning tests\n\n\nInstall requirements:\n\n\n$ pip install -e '.[testing]'\n\n\n\nTo run all linters and tests:\n\n\n$ tox\n\n\n\nIf you want to run a specyfic test\n\n\n$ py.test -k test_name",
            "title": "Home"
        },
        {
            "location": "/#clove",
            "text": "version number: 1.1.1",
            "title": "clove"
        },
        {
            "location": "/#overview",
            "text": "Clove is a library that makes atomic swaps between chains easy.  Documentation available at  lamden.github.io/clove .",
            "title": "Overview"
        },
        {
            "location": "/#installation",
            "text": "To install use pip:  $ pip install clove  Or clone the repo:  $ git clone https://github.com/Landen/clove.git\n$ python setup.py install",
            "title": "Installation"
        },
        {
            "location": "/#development",
            "text": "",
            "title": "Development"
        },
        {
            "location": "/#getting-started",
            "text": "$ git clone https://github.com/Landen/clove.git\n$ cd clove\n$ virtualenv venv --python=python3.6\n$ . venv/bin/activate\n$ python setup.py develop",
            "title": "Getting started"
        },
        {
            "location": "/#running-tests",
            "text": "Install requirements:  $ pip install -e '.[testing]'  To run all linters and tests:  $ tox  If you want to run a specyfic test  $ py.test -k test_name",
            "title": "Running tests"
        },
        {
            "location": "/usage/",
            "text": "Clove atomic swap example\n\n\n\n\nBitcoin based networks\n\n\nEthereum Testnet\n\n\n\n\nBitcoin based networks\n\n\nAssumptions\n\n\n\n\nAlice has over 0.4 monacoins and wants to buy 0.01 litecoins\n\n\nAlice doesn't have a litecoin wallet\n\n\nBob has over 0.01 litecoins and wants to buy around 0.4 monacoin\n\n\nBob has a monacoin wallet\n\n\n\n\n(2018-03-01) Exchange rate: 0.01 litecoins is 0.4 monacoin\n\n\nCryptoid API key\n\n\nFor operations on networks supported by \nchainz.cryptoid.info\n API a \nfree API key\n is needed. This key has to be setup as a environment variable under the \nCRYPTOID_API_KEY\n key.\n\n\n$ export CRYPTOID_API_KEY=YOUR_API_KEY\n\n\n\nEtherscan API key\n\n\nFor operations on Etherscan API (e.q. \nfind_redeem_transaction\n) a \nfree API key\n is needed. This key has to be setup as a environment variable under the \nETHERSCAN_API_KEY\n key.\n\n\n$ export ETHERSCAN_API_KEY=YOUR_API_KEY\n\n\n\n1. Wallets setup\n\n\n[\nAlice\n] has to create a new litecoin wallet\n\n\nfrom clove.network import Litecoin\n\nltc_network = Litecoin()\n\nalice_ltc_wallet = ltc_network.get_new_wallet()\n\nalice_ltc_wallet.address\n'LXRAXRgPo84p58746zaBXUFFevCTYBPxgb'\n\n\n\nhttps://live.blockcypher.com/ltc/address/LXRAXRgPo84p58746zaBXUFFevCTYBPxgb/\n\n\nalice_ltc_wallet.get_private_key()\n# returns private key; The one below is fake, because of obvious security reasons.\n'L15kFZg4MdoX2kqXEeEZMjbbVEdZzt1zL2vU59ynrtEf6GB16B3c'\n\n\n\n[\nAlice\n] has to prepare her monacoin wallet\n\n\nfrom clove.network import Monacoin\n\nmona_network = Monacoin()\n\n# Alice provides hers private key. The one below is fake, because of obvious security reasons.\nalice_mona_wallet = mona_network.get_wallet(private_key='cSYq9JswNm79GUdyz6TiNKajRTiJEKgv4RxSWGthP3SmUHiX9WKe')\n\nalice_mona_wallet.address\n'MBriWYyfWNdrAmycN5otoUDWDMrdFK33DQ'\n\n\n\nhttps://bchain.info/MONA/addr/MBriWYyfWNdrAmycN5otoUDWDMrdFK33DQ\n\n\n[\nBob\n] can use his existing monacoin wallet by passing his private key\n\n\nfrom clove.network import Monacoin\n\nmona_network = Monacoin()\n\nbob_mona_wallet = mona_network.get_wallet(private_key='cRoFBWMvcLXrLsYFt794NRBEPUgMLf5AmnJ7VQwiEenc34z7zSpK')\n\nbob_mona_wallet.address\n'MAHnD7u7JD4DPA3R267zcB1xbaaiZrDRmL'\n\n\n\nhttps://bchain.info/MONA/addr/MAHnD7u7JD4DPA3R267zcB1xbaaiZrDRmL\n\n\n[\nBob\n] has to prepare his litecoin wallet\n\n\nfrom clove.network import Litecoin\n\nltc_network = Litecoin()\n\n# Bob provides his private key. The one below is fake, because of obvious security reasons.\nbob_ltc_wallet = ltc_network.get_wallet(private_key='cTVuBqcjryCdHiCfFxkY5ycNPH2RYNrbmgrTVXBsLKG8xR2My3j2')\n\nbob_ltc_wallet.address\n'LUAn5PWmsPavgz32mGkqsUuAKncftS37Jq'\n\n\n\nhttps://live.blockcypher.com/ltc/address/LUAn5PWmsPavgz32mGkqsUuAKncftS37Jq/\n\n\n2. Communication\n\n\nAlice and Bob exchange their wallet addresses.\n\n\n[\nAlice\n]'s console input:\n\n\nbob_mona_address = 'MAHnD7u7JD4DPA3R267zcB1xbaaiZrDRmL'\nbob_ltc_address = 'LUAn5PWmsPavgz32mGkqsUuAKncftS37Jq'\n\n\n\n[\nBob\n]'s console input:\n\n\nalice_mona_address = 'MBriWYyfWNdrAmycN5otoUDWDMrdFK33DQ'\nalice_ltc_address = 'LXRAXRgPo84p58746zaBXUFFevCTYBPxgb'\n\n\n\n3. Alice is initializing an atomic swap transaction\n\n\n[\nAlice\n] has to prepare a transaction input (UTXO's that she wants to spend in this transaction). You can find this information by viewing transaction on block explorer e.g. \nhere\n\n\nFor networks supported by \nblockcypher.com\n or \nchainz.cryptoid.info\n APIs UTXOs can also be gathered automatically.\nSee an exmaple in \nParticipation\n. For \nchainz.cryptoid.info\n, an API key is required - \nread more\n.\n\n\nfrom clove.network.bitcoin.utxo import Utxo\n\nmonacoins_to_swap = 0.4\n\ninitial_utxo_list = [\n    Utxo(\n        tx_id='5d920e7093b2f0ac94cb1c13a42a79ed1c1290fcc4155d15a123d69b1afe05d2',\n        vout=1,\n        value=2.086,\n        tx_script='76a9142b6a3314e8fcf1f1fd6b4d70b112bd5a1928505788ac'\n    ),\n]\n\ninitial_transaction = mona_network.atomic_swap(\n    alice_mona_wallet.address,\n    bob_mona_address,\n    monacoins_to_swap,\n    initial_utxo_list\n)\n\n# As monacoin is not in the blockcypher we need to add fee manually\ninitial_transaction.fee = 0.001\n\ninitial_transaction.add_fee_and_sign(alice_mona_wallet)\n\ninitial_transaction.show_details()\n\n{'contract': '63a61498ff8f419c57646b3e056514185a97d15a7f086e8876a9141a376f6634e41c22b28bc9ef3336a623717083a46704ef6bdc5ab17576a9142b6a3314e8fcf1f1fd6b4d70b112bd5a192850576888ac',\n 'contract_address': '3QNHtUAJ85WWfF1rXPpLde4CjwYKcJYLiv',\n 'contract_transaction': '0100000001d205fe1a9bd623a1155d15c4fc90121ced792aa4131ccb94acf0b293700e925d010000008a473044022003d3f4216fdc08be20c2d828227d8652e89dcf20566719a561265d3886c0fda7022035fb05dd2bc1b9e325837af29b0e7687815e5544f643a24480aa09ddfc10cb460141044fbe9cf6ef9bf4a13a693ee1d431eb700a592e8097619e0cfe82aff2a5c231e7154e464e4ec94201007b403b6de9a5819b0bc31eef0741c4fe6e932bca6d9cca0000000002005a62020000000017a914f8c050e6c124b3d0b693779b418dec5f40b8188087201b0b0a000000001976a9142b6a3314e8fcf1f1fd6b4d70b112bd5a1928505788ac00000000',\n 'fee': 0.001,\n 'fee_per_kb': 0.0,\n 'fee_per_kb_text': '0.00000000 MONA / 1 kB',\n 'fee_text': '0.00100000 MONA',\n 'locktime': datetime.datetime(2018, 4, 22, 11, 3, 11, 86941),\n 'recipient_address': 'MAHnD7u7JD4DPA3R267zcB1xbaaiZrDRmL',\n 'refund_address': 'MBriWYyfWNdrAmycN5otoUDWDMrdFK33DQ',\n 'secret': '9a2cfc32611dbd3ac3261cd23622223e85e6c6575852d20e031c1333b9070bc2',\n 'secret_hash': '98ff8f419c57646b3e056514185a97d15a7f086e',\n 'size': 255,\n 'size_text': '255 bytes',\n 'transaction_address': 'a0110ac963517ea12935fabe92ecd90217ba6847069dad21f9523bbc83bbf0e4',\n 'value': 0.4,\n 'value_text': '0.40000000 MONA'}\n\n initial_transaction.publish()\n 'a0110ac963517ea12935fabe92ecd90217ba6847069dad21f9523bbc83bbf0e4'\n\n\n\nhttps://bchain.info/MONA/tx/a0110ac963517ea12935fabe92ecd90217ba6847069dad21f9523bbc83bbf0e4\n\n\n4. Communication\n\n\n[\nAlice\n] sends her transaction hash \na0110ac963517ea12935fabe92ecd90217ba6847069dad21f9523bbc83bbf0e4\n to Bob, so he can get the \nraw_transaction\n (e.g. \"hex\" in raw data of \ntransaction\n).\nAnd also she needs to send the contract to Bob (i.e. \n63a61498ff8f419c57646b3e056514185a97d15a7f086e8876a9141a376f6634e41c22b28bc9ef3336a623717083a46704ef6bdc5ab17576a9142b6a3314e8fcf1f1fd6b4d70b112bd5a192850576888ac\n)\n\n\n5. Contract audit\n\n\n[\nBob\n] needs to create a contract in network of coins he wants to receive (i.e. Alice's network), in our case in Monacoin network.\nAnd also at this point Bob should validate if the data returned in the contract is correct. He should also check if the transaction is present in the blockchain API (e.g. Bchain.info)\n\n\nalice_contract = mona_network.audit_contract(\n    contract='63a61498ff8f419c57646b3e056514185a97d15a7f086e8876a9141a376f6634e41c22b28bc9ef3336a623717083a46704ef6bdc5ab17576a9142b6a3314e8fcf1f1fd6b4d70b112bd5a192850576888ac',\n    raw_transaction='0100000001d205fe1a9bd623a1155d15c4fc90121ced792aa4131ccb94acf0b293700e925d010000008a473044022003d3f4216fdc08be20c2d828227d8652e89dcf20566719a561265d3886c0fda7022035fb05dd2bc1b9e325837af29b0e7687815e5544f643a24480aa09ddfc10cb460141044fbe9cf6ef9bf4a13a693ee1d431eb700a592e8097619e0cfe82aff2a5c231e7154e464e4ec94201007b403b6de9a5819b0bc31eef0741c4fe6e932bca6d9cca0000000002005a62020000000017a914f8c050e6c124b3d0b693779b418dec5f40b8188087201b0b0a000000001976a9142b6a3314e8fcf1f1fd6b4d70b112bd5a1928505788ac00000000',\n)\nalice_contract.show_details()\n\n{'contract_address': '3QNHtUAJ85WWfF1rXPpLde4CjwYKcJYLiv',\n 'locktime': datetime.datetime(2018, 4, 22, 11, 3, 11),\n 'recipient_address': 'MAHnD7u7JD4DPA3R267zcB1xbaaiZrDRmL',\n 'refund_address': 'MBriWYyfWNdrAmycN5otoUDWDMrdFK33DQ',\n 'secret_hash': '98ff8f419c57646b3e056514185a97d15a7f086e',\n 'transaction_address': 'a0110ac963517ea12935fabe92ecd90217ba6847069dad21f9523bbc83bbf0e4',\n 'value': 0.4,\n 'value_text': '0.40000000 MONA'}\n\n\n\n6. Participation\n\n\n[\nBob\n] has to create a parallel transaction from point 3 but in his network (i.e. Litecoin network). We call it  a \nparticipate_transaction\n.\n\n\nfrom clove.network.bitcoin.utxo import Utxo\nfrom clove.utils.bitcoin import from_base_units # blockcypher is showing value in satoshis\n\nlitecoins_to_swap = 0.01\nparticipate_utxo_list = [\n    Utxo(\n        tx_id='42394cedfaeecdbfce788ea3291784177f4f28c83f038adca3864db0c48869ab',\n        vout=1,\n        value=from_base_units(2437887),\n        tx_script='76a914621f617c765c3caa5ce1bb67f6a3e51382b8da2988ac',\n    ),\n]\n\n\n\nFor networks supported by \nblockcypher.com\n or \nchainz.cryptoid.info\n APIs the UTXOs can also be gathered automatically. For \nchainz.cryptoid.info\n, an API key is required - \nread more\n.\n\n\nparticipate_utxo_list = ltc_network.get_utxo(bob_ltc_wallet.address, litecoins_to_swap)\n\n\n\nWith the list of UTXOs \nparticipate_transaction\n can be created.\n\n\nparticipate_transaction = alice_contract.participate(\n    'ltc',\n    bob_ltc_wallet.address,\n    alice_ltc_address,\n    litecoins_to_swap,\n    participate_utxo_list\n)\n\nparticipate_transaction.add_fee_and_sign(bob_ltc_wallet)\n\nparticipate_transaction.show_details()\n\n{'contract': '63a61498ff8f419c57646b3e056514185a97d15a7f086e8876a91485c0522f6e23beb11cc3d066cd20ed732648a4e667045d23db5ab17576a914621f617c765c3caa5ce1bb67f6a3e51382b8da296888ac',\n 'contract_address': 'MWXzG4RaH4VH6hiNKakxkZQqW7NSHYRGrA',\n 'contract_transaction': '0100000002be1c074d0e9e119b2099aa792ebda8c0c4a432a22c79490634a556da38435f67000000008a4730440220042d58c03f0db46727770a4c81543ee90294b87ea606baa2ff589d2dd5857c5c02206c5a8ea6e6579191ed3485523a8b27d28db666205c2a2d8477764cc6c6b913e801410431ab07973bbb5dbc6b7422fc7322abb5df15f77694c0b15b09a325996af47ddd887c7eaa72c656a71fcb333068956de7b3e2f15deaafc1d9285d779ca1b6a3f600000000e930c516c102222acd2439a5b4fe462188c56e8e236588c53a689e2dbf86b6dd010000008a473044022043154c8c7935bff74743551863169fe8617a4c1043894786b4a7d14c46f68905022040431412a306ca13d4bd791ae3cd07e9e6eaa6982d105b07d0cd52a05fc7b1fd01410431ab07973bbb5dbc6b7422fc7322abb5df15f77694c0b15b09a325996af47ddd887c7eaa72c656a71fcb333068956de7b3e2f15deaafc1d9285d779ca1b6a3f6000000000240420f000000000017a914f849d56da5d65cc96764c25fbcd79161f170f67a872e590400000000001976a914621f617c765c3caa5ce1bb67f6a3e51382b8da2988ac00000000',\n 'fee': 0.00030225,\n 'fee_per_kb': 0.00069482,\n 'fee_per_kb_text': '0.00069482 LTC / 1 kB',\n 'fee_text': '0.00030225 LTC',\n 'locktime': datetime.datetime(2018, 4, 21, 11, 41, 17, 629962),\n 'recipient_address': 'LXRAXRgPo84p58746zaBXUFFevCTYBPxgb',\n 'refund_address': 'LUAn5PWmsPavgz32mGkqsUuAKncftS37Jq',\n 'secret': '',\n 'secret_hash': '98ff8f419c57646b3e056514185a97d15a7f086e',\n 'size': 434,\n 'size_text': '434 bytes',\n 'transaction_address': '565c1a6d3e533760e454fe1b7b55a63fafb2438cde4e285f1415b34f5aab5c50',\n 'value': 0.01,\n 'value_text': '0.01000000 LTC'}\n\nparticipate_transaction.publish()\n'565c1a6d3e533760e454fe1b7b55a63fafb2438cde4e285f1415b34f5aab5c50'\n\n\n\nhttps://live.blockcypher.com/ltc/tx/565c1a6d3e533760e454fe1b7b55a63fafb2438cde4e285f1415b34f5aab5c50/\n\n\n7. Communication\n\n\n[\nBob\n] sends his transaction hash \n565c1a6d3e533760e454fe1b7b55a63fafb2438cde4e285f1415b34f5aab5c50\n and contract \n63a61498ff8f419c57646b3e056514185a97d15a7f086e8876a91485c0522f6e23beb11cc3d066cd20ed732648a4e667045d23db5ab17576a914621f617c765c3caa5ce1bb67f6a3e51382b8da296888ac\n to Alice.\n\n\n8. Contract audit\n\n\n[\nAlice\n] needs to audit the contract in network of coins she wants to receive (i.e. Bob's network), in our case on the Litecoin network.\nAnd also at this point Alice should validate if the data returned in the contract is correct. She should also check if the transaction is present in the blockchain API (e.g. Blockexplorer)\n\n\nFor networks supported by \nblockcypher.com\n or \nchainz.cryptoid.info\n APIs contract audit can be done based on contract and transaction hash.\n    bob_contract = ltc_network.audit_contract(\n        contract='63a61498ff8f419c57646b3e056514185a97d15a7f086e8876a91485c0522f6e23beb11cc3d066cd20ed732648a4e667045d23db5ab17576a914621f617c765c3caa5ce1bb67f6a3e51382b8da296888ac',\n        transaction_address='565c1a6d3e533760e454fe1b7b55a63fafb2438cde4e285f1415b34f5aab5c50'\n    )\n\n\nFor unsupported networks Alice should find the raw transaction for given transaction address by herself.\n    bob_contract = ltc_network.audit_contract(\n        contract='63a61498ff8f419c57646b3e056514185a97d15a7f086e8876a91485c0522f6e23beb11cc3d066cd20ed732648a4e667045d23db5ab17576a914621f617c765c3caa5ce1bb67f6a3e51382b8da296888ac',\n        raw_transaction='0100000002be1c074d0e9e119b2099aa792ebda8c0c4a432a22c79490634a556da38435f67000000008a4730440220042d58c03f0db46727770a4c81543ee90294b87ea606baa2ff589d2dd5857c5c02206c5a8ea6e6579191ed3485523a8b27d28db666205c2a2d8477764cc6c6b913e801410431ab07973bbb5dbc6b7422fc7322abb5df15f77694c0b15b09a325996af47ddd887c7eaa72c656a71fcb333068956de7b3e2f15deaafc1d9285d779ca1b6a3f600000000e930c516c102222acd2439a5b4fe462188c56e8e236588c53a689e2dbf86b6dd010000008a473044022043154c8c7935bff74743551863169fe8617a4c1043894786b4a7d14c46f68905022040431412a306ca13d4bd791ae3cd07e9e6eaa6982d105b07d0cd52a05fc7b1fd01410431ab07973bbb5dbc6b7422fc7322abb5df15f77694c0b15b09a325996af47ddd887c7eaa72c656a71fcb333068956de7b3e2f15deaafc1d9285d779ca1b6a3f6000000000240420f000000000017a914f849d56da5d65cc96764c25fbcd79161f170f67a872e590400000000001976a914621f617c765c3caa5ce1bb67f6a3e51382b8da2988ac00000000'\n    )\n\n\nbob_contract.show_details()\n\n{'contract_address': 'MWXzG4RaH4VH6hiNKakxkZQqW7NSHYRGrA',\n 'locktime': datetime.datetime(2018, 4, 21, 11, 41, 17),\n 'recipient_address': 'LXRAXRgPo84p58746zaBXUFFevCTYBPxgb',\n 'refund_address': 'LUAn5PWmsPavgz32mGkqsUuAKncftS37Jq',\n 'secret_hash': '98ff8f419c57646b3e056514185a97d15a7f086e',\n 'transaction_address': '565c1a6d3e533760e454fe1b7b55a63fafb2438cde4e285f1415b34f5aab5c50',\n 'value': 0.01,\n 'value_text': '0.01000000 LTC'}\n\n\n\n9. First redeem transaction\n\n\n[\nAlice\n] can now collect coins she wants, thus she creates redeem transaction.\n\n\nalice_redeem = bob_contract.redeem(secret=initial_transaction.show_details()['secret'], wallet=alice_ltc_wallet)\nalice_redeem.add_fee_and_sign()\n\nalice_redeem.show_details()\n\n{'fee': 0.00023832,\n 'fee_per_kb': 0.00069482,\n 'fee_per_kb_text': '0.00069482 LTC / 1 kB',\n 'fee_text': '0.00023832 LTC',\n 'recipient_address': 'LXRAXRgPo84p58746zaBXUFFevCTYBPxgb',\n 'size': 343,\n 'size_text': '343 bytes',\n 'transaction': '0100000001505cab5a4fb315145f284ede8c43b2af3fa6557b1bfe54e46037533e6d1a5c5600000000fd0001483045022100d63353332b762551f3278ea02ab25746ddc78aae08c73cfd81e7871b54ebee88022068fa0e3b6578efbfed07373b2147b190ebe6466d2cdbed15cc2eecb0f218837001410459cdb91eb7298bc2578dc4e7ac2109ac3cfd9dc9818795c5583e720d2114d540724bf26b4541f683ff51968db627a04eecd1f5cff615b6350dad5fb595f8adf4209a2cfc32611dbd3ac3261cd23622223e85e6c6575852d20e031c1333b9070bc2514c5163a61498ff8f419c57646b3e056514185a97d15a7f086e8876a91485c0522f6e23beb11cc3d066cd20ed732648a4e667045d23db5ab17576a914621f617c765c3caa5ce1bb67f6a3e51382b8da296888ac000000000128e50e00000000001976a91485c0522f6e23beb11cc3d066cd20ed732648a4e688ac00000000',\n 'transaction_address': '0cd90567497823097d03464b4b2d08dd659f1c5621dd55e9540bc9bcd3e191ec',\n 'value': 0.01,\n 'value_text': '0.01000000 LTC'}\n\nalice_redeem.publish()\n'0cd90567497823097d03464b4b2d08dd659f1c5621dd55e9540bc9bcd3e191ec'\n\n\n\nhttps://live.blockcypher.com/ltc/tx/0cd90567497823097d03464b4b2d08dd659f1c5621dd55e9540bc9bcd3e191ec/\n\n\n[\nAlice\n] should get litecoins just after redeem transaction is published.\n\n\n10. Secret capture\n\n\n[\nBob\n] should check if his contract has been already redeemed to be able to extract the secret from the redeem transaction.\n\n\nFor networks supported by \nblockcypher.com\n or \nchainz.cryptoid.info\n APIs this can be done automatically.\n\n\ncontract_address = participate_transaction.show_details()['contract_address']\nsecret = ltc_network.extract_secret_from_redeem_transaction(contract_address)\n\n\n\nFor \nchainz.cryptoid.info\n API key is required - \nread more\n.\n\n\nFor unsupported networks Bob should extract the secret himself.\nFirst by using the \ncontract_address\n he need to find \nthe contract\n and the last transacion there (first from the top) will be the \nredeem transaction\n.\n\n\nby using \nhex\n field (whole transaction)\n\n\nsecret = ltc_network.extract_secret(raw_transaction='0100000001505cab5a4fb315145f284ede8c43b2af3fa6557b1bfe54e46037533e6d1a5c5600000000fd0001483045022100d63353332b762551f3278ea02ab25746ddc78aae08c73cfd81e7871b54ebee88022068fa0e3b6578efbfed07373b2147b190ebe6466d2cdbed15cc2eecb0f218837001410459cdb91eb7298bc2578dc4e7ac2109ac3cfd9dc9818795c5583e720d2114d540724bf26b4541f683ff51968db627a04eecd1f5cff615b6350dad5fb595f8adf4209a2cfc32611dbd3ac3261cd23622223e85e6c6575852d20e031c1333b9070bc2514c5163a61498ff8f419c57646b3e056514185a97d15a7f086e8876a91485c0522f6e23beb11cc3d066cd20ed732648a4e667045d23db5ab17576a914621f617c765c3caa5ce1bb67f6a3e51382b8da296888ac000000000128e50e00000000001976a91485c0522f6e23beb11cc3d066cd20ed732648a4e688ac00000000')\n\n\n\nor \nscript\n field from the first input:\n\n\nsecret = ltc_network.extract_secret(scriptsig='483045022100d63353332b762551f3278ea02ab25746ddc78aae08c73cfd81e7871b54ebee88022068fa0e3b6578efbfed07373b2147b190ebe6466d2cdbed15cc2eecb0f218837001410459cdb91eb7298bc2578dc4e7ac2109ac3cfd9dc9818795c5583e720d2114d540724bf26b4541f683ff51968db627a04eecd1f5cff615b6350dad5fb595f8adf4209a2cfc32611dbd3ac3261cd23622223e85e6c6575852d20e031c1333b9070bc2514c5163a61498ff8f419c57646b3e056514185a97d15a7f086e8876a91485c0522f6e23beb11cc3d066cd20ed732648a4e667045d23db5ab17576a914621f617c765c3caa5ce1bb67f6a3e51382b8da296888ac')\n\n\n\n11. Second redeem transaction\n\n\n[\nBob\n] can now collect coins he wants, thus he creates redeem transaction.\n\n\nbob_redeem = alice_contract.redeem(secret=secret, wallet=bob_mona_wallet)\n\n# As monacoin is not in the blockcypher we need to add fee manually\nbob_redeem.fee = 0.001\nbob_redeem.add_fee_and_sign()\n\nbob_redeem.show_details()\n{'fee': 0.001,\n 'fee_per_kb': 0.0,\n 'fee_per_kb_text': '0.00000000 MONA / 1 kB',\n 'fee_text': '0.00100000 MONA',\n 'recipient_address': 'MAHnD7u7JD4DPA3R267zcB1xbaaiZrDRmL',\n 'size': 343,\n 'size_text': '343 bytes',\n 'transaction': '0100000001e4f0bb83bc3b52f921ad9d064768ba1702d9ec92befa3529a17e5163c90a11a000000000fd0001483045022100bf0dec5ab03d024147bc26df33a64f2389c4647fc1f9a92e93575cb5f2ff5081022060a54dd5135bc38eb6e75c65ec4e47efa08e7298fed83757db31bd53619a17d501410447408e366d0e979101f776ab10753091b0b62ba9aa609d006263959e030fb2d96e054c1f976a8cddcee5e1a95022cf289be89577ca348c893223d2e648de1abb209a2cfc32611dbd3ac3261cd23622223e85e6c6575852d20e031c1333b9070bc2514c5163a61498ff8f419c57646b3e056514185a97d15a7f086e8876a9141a376f6634e41c22b28bc9ef3336a623717083a46704ef6bdc5ab17576a9142b6a3314e8fcf1f1fd6b4d70b112bd5a192850576888ac000000000160d36002000000001976a9141a376f6634e41c22b28bc9ef3336a623717083a488ac00000000',\n 'transaction_address': '1593f8ac14340e23d629342881e188b848af3dc1b7909791aacde53d48a1e697',\n 'value': 0.4,\n 'value_text': '0.40000000 MONA'}\n\nbob_redeem.publish()\n'1593f8ac14340e23d629342881e188b848af3dc1b7909791aacde53d48a1e697'\n\n\n\nhttps://bchain.info/MONA/tx/1593f8ac14340e23d629342881e188b848af3dc1b7909791aacde53d48a1e697\n\n\n[\nBob\n] should get monacoins just after redeem transaction is published.\n\n\nEthereum Testnet\n\n\nAssumptions\n\n\n\n\nAlice wants to buy 0.5 ETH for 1000 Blockbusters Test tokens in Ethereum Kovan Testnet\n\n\nBob wants to buy 1000 Blockbusters Test tokens for 0.5 ETH in Ethereum Kovan Testnet\n\n\nBoth Alice and Bob have wallets in Ethereum Kovan network\n\n\n\n\n1. Setup\n\n\nAlice should initialize the network object, set her address, private key, amount of tokens to be swapped and the address of the token.\n\n\n[\nAlice\n]'s console input:\n    from clove.network import EthereumTestnet\n\n\neth_test = EthereumTestnet()\n\naddress = '0x999F348959E611F1E9eab2927c21E88E48e6Ef45'\nprivate_key = 'alice_private_key'\n\ntokens_to_swap = '1000'\ntoken_address = '0x53E546387A0d054e7FF127923254c0a679DA6DBf'\n\n\n\nIt is also possible to get the token data directly from the network object by the token symbol if the token is supported:\n\n\ntoken = eth_test.get_token_by_symbol('BBT')\ntoken_address = token.token_address\n\n\n\nBob should initialize the network object, set his address, private key and amount of ethers to be swapped.\n\n\n[\nBob\n]'s console input:\n    from clove.network import EthereumTestnet\n\n\neth_test = EthereumTestnet()\n\naddress = '0xd867f293Ba129629a9f9355fa285B8D3711a9092'\nprivate_key = 'bob_private_key'\n\neth_to_swap = '0.5'\n\n\n\n2. Communication\n\n\nAlice and Bob exchange their wallet addresses.\n\n\n[\nAlice\n]'s console input:\n\n\nbob_address = '0xd867f293Ba129629a9f9355fa285B8D3711a9092'\n\n\n\n[\nBob\n]'s console input:\n\n\nalice_address = '0x999F348959E611F1E9eab2927c21E88E48e6Ef45'\n\n\n\n3. Token approval\n\n\nTo send tokens to an atomic swap contract Alice has to first approve that the tokens she own can be spend by that contract.\n\n\napprove_transaction = eth_test.approve_token(address, tokens_to_swap, token_address)\napprove_transaction.sign(private_key)\napprove_transaction.show_details()\n\n{'contract_address': '0x7657Ca877Fac31D20528B473162E39B6E152fd2e',\n 'data': '0x095ea7b30000000000000000000000007657ca877fac31d20528b473162e39b6e152fd2e00000000000000000000000000000000000000000000003635c9adc5dea00000',\n 'gasprice': 20000000000,\n 'nonce': 34,\n 'r': 112426775415197512764524506063660144184257199595961926193168166347175765778579,\n 's': 1927313746114385663128009448899947006587692267799486537632890580735710981604,\n 'sender': '0x999f348959e611f1e9eab2927c21e88e48e6ef45',\n 'sender_address': '0x999F348959E611F1E9eab2927c21E88E48e6Ef45',\n 'startgas': 45576,\n 'token_address': '0x53E546387A0d054e7FF127923254c0a679DA6DBf',\n 'transaction_address': '0x40b8d435ff4bfbb202aed75dfc87f64e0d3da3838581b6635ae615e0454bd4fc',\n 'v': 28,\n 'value': Decimal('1000'),\n 'value_text': '1000.000000000000000000 BBT'}\n\napprove_transaction.publish()\n'0x40b8d435ff4bfbb202aed75dfc87f64e0d3da3838581b6635ae615e0454bd4fc'\n\n\n\nhttps://kovan.etherscan.io/tx/0x40b8d435ff4bfbb202aed75dfc87f64e0d3da3838581b6635ae615e0454bd4fc\n\n\n4. Alice is initializing an atomic swap transaction\n\n\ninitial_transaction = eth_test.atomic_swap(\n    address,\n    bob_address,\n    tokens_to_swap,\n    token_address=token_address\n)\ninitial_transaction.sign(private_key)\ninitial_transaction.show_details()\n\n{'contract_address': '0x7657Ca877Fac31D20528B473162E39B6E152fd2e',\n 'data': '0x52f50db7000000000000000000000000000000000000000000000000000000005acde5c48cebcb1af6fa5fddeb091f61f0af1c49a6de9922000000000000000000000000000000000000000000000000d867f293ba129629a9f9355fa285b8d3711a909200000000000000000000000053e546387a0d054e7ff127923254c0a679da6dbf00000000000000000000000000000000000000000000003635c9adc5dea00000',\n 'gas_limit': None,\n 'gasprice': 20000000000,\n 'locktime': datetime.datetime(2018, 4, 11, 10, 39, 0, 535753),\n 'nonce': 35,\n 'r': 81080759208730988867907650750974367955166566527430658028938499115001735694910,\n 'recipient_address': '0xd867f293Ba129629a9f9355fa285B8D3711a9092',\n 'refund_address': '0x999F348959E611F1E9eab2927c21E88E48e6Ef45',\n 's': 25371208205154004938960599477560107420234164093623357637201902103097079815422,\n 'secret': 'c037026e2d0f3901c797d2414df30a4ce700d18055925f416e575635c5c2b7ac',\n 'secret_hash': '8cebcb1af6fa5fddeb091f61f0af1c49a6de9922',\n 'sender': '0x999f348959e611f1e9eab2927c21e88e48e6ef45',\n 'sender_address': '0x999F348959E611F1E9eab2927c21E88E48e6Ef45',\n 'startgas': 300000,\n 'to': '0x7657ca877fac31d20528b473162e39b6e152fd2e',\n 'token_address': '0x53E546387A0d054e7FF127923254c0a679DA6DBf',\n 'transaction_address': '0x4cc2308652423a1b05712def62fe5183dfa507bd033941bdb40b56a258760840',\n 'v': 27,\n 'value': Decimal('1000'),\n 'value_text': '1000.000000000000000000 BBT'}\n\ninitial_transaction.publish()\n'0x4cc2308652423a1b05712def62fe5183dfa507bd033941bdb40b56a258760840'\n\n\n\nhttps://kovan.etherscan.io/tx/0x4cc2308652423a1b05712def62fe5183dfa507bd033941bdb40b56a258760840\n\n\n5. Communication\n\n\n[\nAlice\n] sends hers transaction address \n0x4cc2308652423a1b05712def62fe5183dfa507bd033941bdb40b56a258760840\n to Bob so he can audit created contract.\n\n\n6. Contract audit\n\n\n[\nBob\n] needs to audit the contract in the network it was created in, in our case it's Ethereum Testnet network.\nAnd also at this point Bob should validate if the data returned in the contract is correct.\n\n\nalice_contract = eth_test.audit_contract('0x4cc2308652423a1b05712def62fe5183dfa507bd033941bdb40b56a258760840')\nalice_contract.show_details()\n\n{'contract_address': '0x7657Ca877Fac31D20528B473162E39B6E152fd2e',\n 'locktime': datetime.datetime(2018, 4, 11, 10, 39),\n 'recipient_address': '0xd867f293Ba129629a9f9355fa285B8D3711a9092',\n 'refund_address': '0x999F348959E611F1E9eab2927c21E88E48e6Ef45',\n 'secret_hash': '8cebcb1af6fa5fddeb091f61f0af1c49a6de9922',\n 'token_address': '0x53E546387A0d054e7FF127923254c0a679DA6DBf',\n 'transaction_address': '0x4cc2308652423a1b05712def62fe5183dfa507bd033941bdb40b56a258760840',\n 'value': Decimal('1000'),\n 'value_text': '1000.000000000000000000 BBT'}\n\n\n\n7. Participation\n\n\n[\nBob\n] has to create parallel transaction from point 4 but for 0.5 ETH. We call it \nparticipate_transaction\n.\n\n\nparticipate_transaction = alice_contract.participate(\n    'ETH-TESTNET',\n    address,\n    alice_address,\n    eth_to_swap\n)\n\nparticipate_transaction.sign(private_key)\nparticipate_transaction.show_details()\n\n{'contract_address': '0x9F7e5402ed0858Ea0C5914D44B900A42C89547B8',\n 'data': '0xeb8ae1ed000000000000000000000000000000000000000000000000000000005acca1d68cebcb1af6fa5fddeb091f61f0af1c49a6de9922000000000000000000000000000000000000000000000000999f348959e611f1e9eab2927c21e88e48e6ef45',\n 'gas_limit': 126221,\n 'gasprice': 20000000000,\n 'locktime': datetime.datetime(2018, 4, 10, 11, 36, 54, 224171),\n 'nonce': 18,\n 'r': 10117394961799586109544014237169747431096329877057063230289022533801441532789,\n 'recipient_address': '0x999F348959E611F1E9eab2927c21E88E48e6Ef45',\n 'refund_address': '0xd867f293Ba129629a9f9355fa285B8D3711a9092',\n 's': 34556783084242874049490624129921763496945955547455400337813271950949674389178,\n 'secret_hash': '8cebcb1af6fa5fddeb091f61f0af1c49a6de9922',\n 'sender': '0xd867f293ba129629a9f9355fa285b8d3711a9092',\n 'sender_address': '0xd867f293Ba129629a9f9355fa285B8D3711a9092',\n 'startgas': 126221,\n 'to': '0x9f7e5402ed0858ea0c5914d44b900a42c89547b8',\n 'transaction_address': '0xc9b2bf9b67dcfea39dea71b3416922adfcae23f6410be7d109fb9df2e1c0695f',\n 'v': 28,\n 'value': Decimal('0.5'),\n 'value_text': '0.500000000000000000 ETH'}\n\nparticipate_transaction.publish()\n'0xc9b2bf9b67dcfea39dea71b3416922adfcae23f6410be7d109fb9df2e1c0695f'\n\n\n\nhttps://kovan.etherscan.io/tx/0xc9b2bf9b67dcfea39dea71b3416922adfcae23f6410be7d109fb9df2e1c0695f\n\n\n8. Communication\n\n\n[\nBob\n] sends his transaction address \n0xc9b2bf9b67dcfea39dea71b3416922adfcae23f6410be7d109fb9df2e1c0695f\n to Alice.\n\n\n9. Contract audit\n\n\n[\nAlice\n] needs to audit the contract in the network it was created in, in our case it's Ethereum Testnet network.\nAnd also at this point Alice should validate if the data returned in the contract is correct.\n\n\nbob_contract = eth_test.audit_contract(\n    '0xc9b2bf9b67dcfea39dea71b3416922adfcae23f6410be7d109fb9df2e1c0695f'\n)\nbob_contract.show_details()\n\n{'contract_address': '0x9F7e5402ed0858Ea0C5914D44B900A42C89547B8',\n 'locktime': datetime.datetime(2018, 4, 10, 11, 36, 54),\n 'recipient_address': '0x999F348959E611F1E9eab2927c21E88E48e6Ef45',\n 'refund_address': '0xd867f293Ba129629a9f9355fa285B8D3711a9092',\n 'secret_hash': '8cebcb1af6fa5fddeb091f61f0af1c49a6de9922',\n 'transaction_address': '0xc9b2bf9b67dcfea39dea71b3416922adfcae23f6410be7d109fb9df2e1c0695f',\n 'value': Decimal('0.5'),\n 'value_text': '0.500000000000000000 ETH'}\n\n\n\n10. First redeem transaction\n\n\n[\nAlice\n] can now collect coins she wants, thus she creates redeem transaction.\n\n\nalice_redeem = bob_contract.redeem(secret=initial_transaction.show_details()['secret'])\nalice_redeem.sign(private_key)\n\nalice_redeem.show_details()\n\n{'data': '0xeda1122cc037026e2d0f3901c797d2414df30a4ce700d18055925f416e575635c5c2b7ac',\n 'gasprice': 20000000000,\n 'hash': '0x80addbc1b1ff0cf32949c78cde0dc4347f1a81e7f510fd266aa934523c92c2c1',\n 'nonce': 36,\n 'r': 59319998726546023363151651169655572196637192178004534224886682741537229136353,\n 's': 49667378228500740364784037188336222900603288337407062594007817473604371090679,\n 'sender': '0x999f348959e611f1e9eab2927c21e88e48e6ef45',\n 'startgas': 100000,\n 'to': '0x9f7e5402ed0858ea0c5914d44b900a42c89547b8',\n 'v': 28,\n 'value': Decimal('0.5'),\n 'value_text': '0.500000000000000000 ETH'}\n\nalice_redeem.publish()\n'0x80addbc1b1ff0cf32949c78cde0dc4347f1a81e7f510fd266aa934523c92c2c1'\n\n\n\nhttps://kovan.etherscan.io/tx/0x80addbc1b1ff0cf32949c78cde0dc4347f1a81e7f510fd266aa934523c92c2c1\n\n\n[\nAlice\n] will get ether just after redeem transaction is published.\n\n\n11. Secret capture\n\n\n[\nBob\n] should extract the secret from the redeem transaction. For this operation (\nfind_redeem_transaction\n) an Etherscan API key is required - \nread more\n\n\nalice_redeem_tx_hash = bob_contract.find_redeem_transaction()\nsecret = eth_test.extract_secret_from_redeem_transaction(alice_redeem_tx_hash)\n\n\n\n12. Second redeem transaction\n\n\n[\nBob\n] can now collect tokens he wants, thus he creates redeem transaction.\n\n\nbob_redeem = alice_contract.redeem(secret)\nbob_redeem.sign(private_key)\n\nbob_redeem.show_details()\n\n{'data': '0xeda1122cc037026e2d0f3901c797d2414df30a4ce700d18055925f416e575635c5c2b7ac',\n 'gasprice': 20000000000,\n 'hash': '0x4fd41289b816f6122e59a0759bd10441ead75d550562f4b3aad2fddc56eb3274',\n 'nonce': 19,\n 'r': 65751206609566246138168255228214505208801025362644939199208252280848271690158,\n 's': 45667062183625152271430540771543035424773489029161348648874675951038677865195,\n 'sender': '0xd867f293ba129629a9f9355fa285b8d3711a9092',\n 'startgas': 100000,\n 'to': '0x7657ca877fac31d20528b473162e39b6e152fd2e',\n 'v': 27,\n 'value': Decimal('1000'),\n 'value_text': '1000.000000000000000000 BBT'}\n\nbob_redeem.publish()\n'0x4fd41289b816f6122e59a0759bd10441ead75d550562f4b3aad2fddc56eb3274'\n\n\n\nhttps://kovan.etherscan.io/tx/0x4fd41289b816f6122e59a0759bd10441ead75d550562f4b3aad2fddc56eb3274\n\n\n[\nBob\n] will get BBT tokens just after redeem transaction is published.",
            "title": "Usage"
        },
        {
            "location": "/usage/#clove-atomic-swap-example",
            "text": "Bitcoin based networks  Ethereum Testnet",
            "title": "Clove atomic swap example"
        },
        {
            "location": "/usage/#bitcoin-based-networks",
            "text": "",
            "title": "Bitcoin based networks"
        },
        {
            "location": "/usage/#assumptions",
            "text": "Alice has over 0.4 monacoins and wants to buy 0.01 litecoins  Alice doesn't have a litecoin wallet  Bob has over 0.01 litecoins and wants to buy around 0.4 monacoin  Bob has a monacoin wallet   (2018-03-01) Exchange rate: 0.01 litecoins is 0.4 monacoin",
            "title": "Assumptions"
        },
        {
            "location": "/usage/#cryptoid-api-key",
            "text": "For operations on networks supported by  chainz.cryptoid.info  API a  free API key  is needed. This key has to be setup as a environment variable under the  CRYPTOID_API_KEY  key.  $ export CRYPTOID_API_KEY=YOUR_API_KEY",
            "title": "Cryptoid API key"
        },
        {
            "location": "/usage/#etherscan-api-key",
            "text": "For operations on Etherscan API (e.q.  find_redeem_transaction ) a  free API key  is needed. This key has to be setup as a environment variable under the  ETHERSCAN_API_KEY  key.  $ export ETHERSCAN_API_KEY=YOUR_API_KEY",
            "title": "Etherscan API key"
        },
        {
            "location": "/usage/#1-wallets-setup",
            "text": "[ Alice ] has to create a new litecoin wallet  from clove.network import Litecoin\n\nltc_network = Litecoin()\n\nalice_ltc_wallet = ltc_network.get_new_wallet()\n\nalice_ltc_wallet.address\n'LXRAXRgPo84p58746zaBXUFFevCTYBPxgb'  https://live.blockcypher.com/ltc/address/LXRAXRgPo84p58746zaBXUFFevCTYBPxgb/  alice_ltc_wallet.get_private_key()\n# returns private key; The one below is fake, because of obvious security reasons.\n'L15kFZg4MdoX2kqXEeEZMjbbVEdZzt1zL2vU59ynrtEf6GB16B3c'  [ Alice ] has to prepare her monacoin wallet  from clove.network import Monacoin\n\nmona_network = Monacoin()\n\n# Alice provides hers private key. The one below is fake, because of obvious security reasons.\nalice_mona_wallet = mona_network.get_wallet(private_key='cSYq9JswNm79GUdyz6TiNKajRTiJEKgv4RxSWGthP3SmUHiX9WKe')\n\nalice_mona_wallet.address\n'MBriWYyfWNdrAmycN5otoUDWDMrdFK33DQ'  https://bchain.info/MONA/addr/MBriWYyfWNdrAmycN5otoUDWDMrdFK33DQ  [ Bob ] can use his existing monacoin wallet by passing his private key  from clove.network import Monacoin\n\nmona_network = Monacoin()\n\nbob_mona_wallet = mona_network.get_wallet(private_key='cRoFBWMvcLXrLsYFt794NRBEPUgMLf5AmnJ7VQwiEenc34z7zSpK')\n\nbob_mona_wallet.address\n'MAHnD7u7JD4DPA3R267zcB1xbaaiZrDRmL'  https://bchain.info/MONA/addr/MAHnD7u7JD4DPA3R267zcB1xbaaiZrDRmL  [ Bob ] has to prepare his litecoin wallet  from clove.network import Litecoin\n\nltc_network = Litecoin()\n\n# Bob provides his private key. The one below is fake, because of obvious security reasons.\nbob_ltc_wallet = ltc_network.get_wallet(private_key='cTVuBqcjryCdHiCfFxkY5ycNPH2RYNrbmgrTVXBsLKG8xR2My3j2')\n\nbob_ltc_wallet.address\n'LUAn5PWmsPavgz32mGkqsUuAKncftS37Jq'  https://live.blockcypher.com/ltc/address/LUAn5PWmsPavgz32mGkqsUuAKncftS37Jq/",
            "title": "1. Wallets setup"
        },
        {
            "location": "/usage/#2-communication",
            "text": "Alice and Bob exchange their wallet addresses.  [ Alice ]'s console input:  bob_mona_address = 'MAHnD7u7JD4DPA3R267zcB1xbaaiZrDRmL'\nbob_ltc_address = 'LUAn5PWmsPavgz32mGkqsUuAKncftS37Jq'  [ Bob ]'s console input:  alice_mona_address = 'MBriWYyfWNdrAmycN5otoUDWDMrdFK33DQ'\nalice_ltc_address = 'LXRAXRgPo84p58746zaBXUFFevCTYBPxgb'",
            "title": "2. Communication"
        },
        {
            "location": "/usage/#3-alice-is-initializing-an-atomic-swap-transaction",
            "text": "[ Alice ] has to prepare a transaction input (UTXO's that she wants to spend in this transaction). You can find this information by viewing transaction on block explorer e.g.  here  For networks supported by  blockcypher.com  or  chainz.cryptoid.info  APIs UTXOs can also be gathered automatically.\nSee an exmaple in  Participation . For  chainz.cryptoid.info , an API key is required -  read more .  from clove.network.bitcoin.utxo import Utxo\n\nmonacoins_to_swap = 0.4\n\ninitial_utxo_list = [\n    Utxo(\n        tx_id='5d920e7093b2f0ac94cb1c13a42a79ed1c1290fcc4155d15a123d69b1afe05d2',\n        vout=1,\n        value=2.086,\n        tx_script='76a9142b6a3314e8fcf1f1fd6b4d70b112bd5a1928505788ac'\n    ),\n]\n\ninitial_transaction = mona_network.atomic_swap(\n    alice_mona_wallet.address,\n    bob_mona_address,\n    monacoins_to_swap,\n    initial_utxo_list\n)\n\n# As monacoin is not in the blockcypher we need to add fee manually\ninitial_transaction.fee = 0.001\n\ninitial_transaction.add_fee_and_sign(alice_mona_wallet)\n\ninitial_transaction.show_details()\n\n{'contract': '63a61498ff8f419c57646b3e056514185a97d15a7f086e8876a9141a376f6634e41c22b28bc9ef3336a623717083a46704ef6bdc5ab17576a9142b6a3314e8fcf1f1fd6b4d70b112bd5a192850576888ac',\n 'contract_address': '3QNHtUAJ85WWfF1rXPpLde4CjwYKcJYLiv',\n 'contract_transaction': '0100000001d205fe1a9bd623a1155d15c4fc90121ced792aa4131ccb94acf0b293700e925d010000008a473044022003d3f4216fdc08be20c2d828227d8652e89dcf20566719a561265d3886c0fda7022035fb05dd2bc1b9e325837af29b0e7687815e5544f643a24480aa09ddfc10cb460141044fbe9cf6ef9bf4a13a693ee1d431eb700a592e8097619e0cfe82aff2a5c231e7154e464e4ec94201007b403b6de9a5819b0bc31eef0741c4fe6e932bca6d9cca0000000002005a62020000000017a914f8c050e6c124b3d0b693779b418dec5f40b8188087201b0b0a000000001976a9142b6a3314e8fcf1f1fd6b4d70b112bd5a1928505788ac00000000',\n 'fee': 0.001,\n 'fee_per_kb': 0.0,\n 'fee_per_kb_text': '0.00000000 MONA / 1 kB',\n 'fee_text': '0.00100000 MONA',\n 'locktime': datetime.datetime(2018, 4, 22, 11, 3, 11, 86941),\n 'recipient_address': 'MAHnD7u7JD4DPA3R267zcB1xbaaiZrDRmL',\n 'refund_address': 'MBriWYyfWNdrAmycN5otoUDWDMrdFK33DQ',\n 'secret': '9a2cfc32611dbd3ac3261cd23622223e85e6c6575852d20e031c1333b9070bc2',\n 'secret_hash': '98ff8f419c57646b3e056514185a97d15a7f086e',\n 'size': 255,\n 'size_text': '255 bytes',\n 'transaction_address': 'a0110ac963517ea12935fabe92ecd90217ba6847069dad21f9523bbc83bbf0e4',\n 'value': 0.4,\n 'value_text': '0.40000000 MONA'}\n\n initial_transaction.publish()\n 'a0110ac963517ea12935fabe92ecd90217ba6847069dad21f9523bbc83bbf0e4'  https://bchain.info/MONA/tx/a0110ac963517ea12935fabe92ecd90217ba6847069dad21f9523bbc83bbf0e4",
            "title": "3. Alice is initializing an atomic swap transaction"
        },
        {
            "location": "/usage/#4-communication",
            "text": "[ Alice ] sends her transaction hash  a0110ac963517ea12935fabe92ecd90217ba6847069dad21f9523bbc83bbf0e4  to Bob, so he can get the  raw_transaction  (e.g. \"hex\" in raw data of  transaction ).\nAnd also she needs to send the contract to Bob (i.e.  63a61498ff8f419c57646b3e056514185a97d15a7f086e8876a9141a376f6634e41c22b28bc9ef3336a623717083a46704ef6bdc5ab17576a9142b6a3314e8fcf1f1fd6b4d70b112bd5a192850576888ac )",
            "title": "4. Communication"
        },
        {
            "location": "/usage/#5-contract-audit",
            "text": "[ Bob ] needs to create a contract in network of coins he wants to receive (i.e. Alice's network), in our case in Monacoin network.\nAnd also at this point Bob should validate if the data returned in the contract is correct. He should also check if the transaction is present in the blockchain API (e.g. Bchain.info)  alice_contract = mona_network.audit_contract(\n    contract='63a61498ff8f419c57646b3e056514185a97d15a7f086e8876a9141a376f6634e41c22b28bc9ef3336a623717083a46704ef6bdc5ab17576a9142b6a3314e8fcf1f1fd6b4d70b112bd5a192850576888ac',\n    raw_transaction='0100000001d205fe1a9bd623a1155d15c4fc90121ced792aa4131ccb94acf0b293700e925d010000008a473044022003d3f4216fdc08be20c2d828227d8652e89dcf20566719a561265d3886c0fda7022035fb05dd2bc1b9e325837af29b0e7687815e5544f643a24480aa09ddfc10cb460141044fbe9cf6ef9bf4a13a693ee1d431eb700a592e8097619e0cfe82aff2a5c231e7154e464e4ec94201007b403b6de9a5819b0bc31eef0741c4fe6e932bca6d9cca0000000002005a62020000000017a914f8c050e6c124b3d0b693779b418dec5f40b8188087201b0b0a000000001976a9142b6a3314e8fcf1f1fd6b4d70b112bd5a1928505788ac00000000',\n)\nalice_contract.show_details()\n\n{'contract_address': '3QNHtUAJ85WWfF1rXPpLde4CjwYKcJYLiv',\n 'locktime': datetime.datetime(2018, 4, 22, 11, 3, 11),\n 'recipient_address': 'MAHnD7u7JD4DPA3R267zcB1xbaaiZrDRmL',\n 'refund_address': 'MBriWYyfWNdrAmycN5otoUDWDMrdFK33DQ',\n 'secret_hash': '98ff8f419c57646b3e056514185a97d15a7f086e',\n 'transaction_address': 'a0110ac963517ea12935fabe92ecd90217ba6847069dad21f9523bbc83bbf0e4',\n 'value': 0.4,\n 'value_text': '0.40000000 MONA'}",
            "title": "5. Contract audit"
        },
        {
            "location": "/usage/#6-participation",
            "text": "[ Bob ] has to create a parallel transaction from point 3 but in his network (i.e. Litecoin network). We call it  a  participate_transaction .  from clove.network.bitcoin.utxo import Utxo\nfrom clove.utils.bitcoin import from_base_units # blockcypher is showing value in satoshis\n\nlitecoins_to_swap = 0.01\nparticipate_utxo_list = [\n    Utxo(\n        tx_id='42394cedfaeecdbfce788ea3291784177f4f28c83f038adca3864db0c48869ab',\n        vout=1,\n        value=from_base_units(2437887),\n        tx_script='76a914621f617c765c3caa5ce1bb67f6a3e51382b8da2988ac',\n    ),\n]  For networks supported by  blockcypher.com  or  chainz.cryptoid.info  APIs the UTXOs can also be gathered automatically. For  chainz.cryptoid.info , an API key is required -  read more .  participate_utxo_list = ltc_network.get_utxo(bob_ltc_wallet.address, litecoins_to_swap)  With the list of UTXOs  participate_transaction  can be created.  participate_transaction = alice_contract.participate(\n    'ltc',\n    bob_ltc_wallet.address,\n    alice_ltc_address,\n    litecoins_to_swap,\n    participate_utxo_list\n)\n\nparticipate_transaction.add_fee_and_sign(bob_ltc_wallet)\n\nparticipate_transaction.show_details()\n\n{'contract': '63a61498ff8f419c57646b3e056514185a97d15a7f086e8876a91485c0522f6e23beb11cc3d066cd20ed732648a4e667045d23db5ab17576a914621f617c765c3caa5ce1bb67f6a3e51382b8da296888ac',\n 'contract_address': 'MWXzG4RaH4VH6hiNKakxkZQqW7NSHYRGrA',\n 'contract_transaction': '0100000002be1c074d0e9e119b2099aa792ebda8c0c4a432a22c79490634a556da38435f67000000008a4730440220042d58c03f0db46727770a4c81543ee90294b87ea606baa2ff589d2dd5857c5c02206c5a8ea6e6579191ed3485523a8b27d28db666205c2a2d8477764cc6c6b913e801410431ab07973bbb5dbc6b7422fc7322abb5df15f77694c0b15b09a325996af47ddd887c7eaa72c656a71fcb333068956de7b3e2f15deaafc1d9285d779ca1b6a3f600000000e930c516c102222acd2439a5b4fe462188c56e8e236588c53a689e2dbf86b6dd010000008a473044022043154c8c7935bff74743551863169fe8617a4c1043894786b4a7d14c46f68905022040431412a306ca13d4bd791ae3cd07e9e6eaa6982d105b07d0cd52a05fc7b1fd01410431ab07973bbb5dbc6b7422fc7322abb5df15f77694c0b15b09a325996af47ddd887c7eaa72c656a71fcb333068956de7b3e2f15deaafc1d9285d779ca1b6a3f6000000000240420f000000000017a914f849d56da5d65cc96764c25fbcd79161f170f67a872e590400000000001976a914621f617c765c3caa5ce1bb67f6a3e51382b8da2988ac00000000',\n 'fee': 0.00030225,\n 'fee_per_kb': 0.00069482,\n 'fee_per_kb_text': '0.00069482 LTC / 1 kB',\n 'fee_text': '0.00030225 LTC',\n 'locktime': datetime.datetime(2018, 4, 21, 11, 41, 17, 629962),\n 'recipient_address': 'LXRAXRgPo84p58746zaBXUFFevCTYBPxgb',\n 'refund_address': 'LUAn5PWmsPavgz32mGkqsUuAKncftS37Jq',\n 'secret': '',\n 'secret_hash': '98ff8f419c57646b3e056514185a97d15a7f086e',\n 'size': 434,\n 'size_text': '434 bytes',\n 'transaction_address': '565c1a6d3e533760e454fe1b7b55a63fafb2438cde4e285f1415b34f5aab5c50',\n 'value': 0.01,\n 'value_text': '0.01000000 LTC'}\n\nparticipate_transaction.publish()\n'565c1a6d3e533760e454fe1b7b55a63fafb2438cde4e285f1415b34f5aab5c50'  https://live.blockcypher.com/ltc/tx/565c1a6d3e533760e454fe1b7b55a63fafb2438cde4e285f1415b34f5aab5c50/",
            "title": "6. Participation"
        },
        {
            "location": "/usage/#7-communication",
            "text": "[ Bob ] sends his transaction hash  565c1a6d3e533760e454fe1b7b55a63fafb2438cde4e285f1415b34f5aab5c50  and contract  63a61498ff8f419c57646b3e056514185a97d15a7f086e8876a91485c0522f6e23beb11cc3d066cd20ed732648a4e667045d23db5ab17576a914621f617c765c3caa5ce1bb67f6a3e51382b8da296888ac  to Alice.",
            "title": "7. Communication"
        },
        {
            "location": "/usage/#8-contract-audit",
            "text": "[ Alice ] needs to audit the contract in network of coins she wants to receive (i.e. Bob's network), in our case on the Litecoin network.\nAnd also at this point Alice should validate if the data returned in the contract is correct. She should also check if the transaction is present in the blockchain API (e.g. Blockexplorer)  For networks supported by  blockcypher.com  or  chainz.cryptoid.info  APIs contract audit can be done based on contract and transaction hash.\n    bob_contract = ltc_network.audit_contract(\n        contract='63a61498ff8f419c57646b3e056514185a97d15a7f086e8876a91485c0522f6e23beb11cc3d066cd20ed732648a4e667045d23db5ab17576a914621f617c765c3caa5ce1bb67f6a3e51382b8da296888ac',\n        transaction_address='565c1a6d3e533760e454fe1b7b55a63fafb2438cde4e285f1415b34f5aab5c50'\n    )  For unsupported networks Alice should find the raw transaction for given transaction address by herself.\n    bob_contract = ltc_network.audit_contract(\n        contract='63a61498ff8f419c57646b3e056514185a97d15a7f086e8876a91485c0522f6e23beb11cc3d066cd20ed732648a4e667045d23db5ab17576a914621f617c765c3caa5ce1bb67f6a3e51382b8da296888ac',\n        raw_transaction='0100000002be1c074d0e9e119b2099aa792ebda8c0c4a432a22c79490634a556da38435f67000000008a4730440220042d58c03f0db46727770a4c81543ee90294b87ea606baa2ff589d2dd5857c5c02206c5a8ea6e6579191ed3485523a8b27d28db666205c2a2d8477764cc6c6b913e801410431ab07973bbb5dbc6b7422fc7322abb5df15f77694c0b15b09a325996af47ddd887c7eaa72c656a71fcb333068956de7b3e2f15deaafc1d9285d779ca1b6a3f600000000e930c516c102222acd2439a5b4fe462188c56e8e236588c53a689e2dbf86b6dd010000008a473044022043154c8c7935bff74743551863169fe8617a4c1043894786b4a7d14c46f68905022040431412a306ca13d4bd791ae3cd07e9e6eaa6982d105b07d0cd52a05fc7b1fd01410431ab07973bbb5dbc6b7422fc7322abb5df15f77694c0b15b09a325996af47ddd887c7eaa72c656a71fcb333068956de7b3e2f15deaafc1d9285d779ca1b6a3f6000000000240420f000000000017a914f849d56da5d65cc96764c25fbcd79161f170f67a872e590400000000001976a914621f617c765c3caa5ce1bb67f6a3e51382b8da2988ac00000000'\n    )  bob_contract.show_details()\n\n{'contract_address': 'MWXzG4RaH4VH6hiNKakxkZQqW7NSHYRGrA',\n 'locktime': datetime.datetime(2018, 4, 21, 11, 41, 17),\n 'recipient_address': 'LXRAXRgPo84p58746zaBXUFFevCTYBPxgb',\n 'refund_address': 'LUAn5PWmsPavgz32mGkqsUuAKncftS37Jq',\n 'secret_hash': '98ff8f419c57646b3e056514185a97d15a7f086e',\n 'transaction_address': '565c1a6d3e533760e454fe1b7b55a63fafb2438cde4e285f1415b34f5aab5c50',\n 'value': 0.01,\n 'value_text': '0.01000000 LTC'}",
            "title": "8. Contract audit"
        },
        {
            "location": "/usage/#9-first-redeem-transaction",
            "text": "[ Alice ] can now collect coins she wants, thus she creates redeem transaction.  alice_redeem = bob_contract.redeem(secret=initial_transaction.show_details()['secret'], wallet=alice_ltc_wallet)\nalice_redeem.add_fee_and_sign()\n\nalice_redeem.show_details()\n\n{'fee': 0.00023832,\n 'fee_per_kb': 0.00069482,\n 'fee_per_kb_text': '0.00069482 LTC / 1 kB',\n 'fee_text': '0.00023832 LTC',\n 'recipient_address': 'LXRAXRgPo84p58746zaBXUFFevCTYBPxgb',\n 'size': 343,\n 'size_text': '343 bytes',\n 'transaction': '0100000001505cab5a4fb315145f284ede8c43b2af3fa6557b1bfe54e46037533e6d1a5c5600000000fd0001483045022100d63353332b762551f3278ea02ab25746ddc78aae08c73cfd81e7871b54ebee88022068fa0e3b6578efbfed07373b2147b190ebe6466d2cdbed15cc2eecb0f218837001410459cdb91eb7298bc2578dc4e7ac2109ac3cfd9dc9818795c5583e720d2114d540724bf26b4541f683ff51968db627a04eecd1f5cff615b6350dad5fb595f8adf4209a2cfc32611dbd3ac3261cd23622223e85e6c6575852d20e031c1333b9070bc2514c5163a61498ff8f419c57646b3e056514185a97d15a7f086e8876a91485c0522f6e23beb11cc3d066cd20ed732648a4e667045d23db5ab17576a914621f617c765c3caa5ce1bb67f6a3e51382b8da296888ac000000000128e50e00000000001976a91485c0522f6e23beb11cc3d066cd20ed732648a4e688ac00000000',\n 'transaction_address': '0cd90567497823097d03464b4b2d08dd659f1c5621dd55e9540bc9bcd3e191ec',\n 'value': 0.01,\n 'value_text': '0.01000000 LTC'}\n\nalice_redeem.publish()\n'0cd90567497823097d03464b4b2d08dd659f1c5621dd55e9540bc9bcd3e191ec'  https://live.blockcypher.com/ltc/tx/0cd90567497823097d03464b4b2d08dd659f1c5621dd55e9540bc9bcd3e191ec/  [ Alice ] should get litecoins just after redeem transaction is published.",
            "title": "9. First redeem transaction"
        },
        {
            "location": "/usage/#10-secret-capture",
            "text": "[ Bob ] should check if his contract has been already redeemed to be able to extract the secret from the redeem transaction.  For networks supported by  blockcypher.com  or  chainz.cryptoid.info  APIs this can be done automatically.  contract_address = participate_transaction.show_details()['contract_address']\nsecret = ltc_network.extract_secret_from_redeem_transaction(contract_address)  For  chainz.cryptoid.info  API key is required -  read more .  For unsupported networks Bob should extract the secret himself.\nFirst by using the  contract_address  he need to find  the contract  and the last transacion there (first from the top) will be the  redeem transaction .  by using  hex  field (whole transaction)  secret = ltc_network.extract_secret(raw_transaction='0100000001505cab5a4fb315145f284ede8c43b2af3fa6557b1bfe54e46037533e6d1a5c5600000000fd0001483045022100d63353332b762551f3278ea02ab25746ddc78aae08c73cfd81e7871b54ebee88022068fa0e3b6578efbfed07373b2147b190ebe6466d2cdbed15cc2eecb0f218837001410459cdb91eb7298bc2578dc4e7ac2109ac3cfd9dc9818795c5583e720d2114d540724bf26b4541f683ff51968db627a04eecd1f5cff615b6350dad5fb595f8adf4209a2cfc32611dbd3ac3261cd23622223e85e6c6575852d20e031c1333b9070bc2514c5163a61498ff8f419c57646b3e056514185a97d15a7f086e8876a91485c0522f6e23beb11cc3d066cd20ed732648a4e667045d23db5ab17576a914621f617c765c3caa5ce1bb67f6a3e51382b8da296888ac000000000128e50e00000000001976a91485c0522f6e23beb11cc3d066cd20ed732648a4e688ac00000000')  or  script  field from the first input:  secret = ltc_network.extract_secret(scriptsig='483045022100d63353332b762551f3278ea02ab25746ddc78aae08c73cfd81e7871b54ebee88022068fa0e3b6578efbfed07373b2147b190ebe6466d2cdbed15cc2eecb0f218837001410459cdb91eb7298bc2578dc4e7ac2109ac3cfd9dc9818795c5583e720d2114d540724bf26b4541f683ff51968db627a04eecd1f5cff615b6350dad5fb595f8adf4209a2cfc32611dbd3ac3261cd23622223e85e6c6575852d20e031c1333b9070bc2514c5163a61498ff8f419c57646b3e056514185a97d15a7f086e8876a91485c0522f6e23beb11cc3d066cd20ed732648a4e667045d23db5ab17576a914621f617c765c3caa5ce1bb67f6a3e51382b8da296888ac')",
            "title": "10. Secret capture"
        },
        {
            "location": "/usage/#11-second-redeem-transaction",
            "text": "[ Bob ] can now collect coins he wants, thus he creates redeem transaction.  bob_redeem = alice_contract.redeem(secret=secret, wallet=bob_mona_wallet)\n\n# As monacoin is not in the blockcypher we need to add fee manually\nbob_redeem.fee = 0.001\nbob_redeem.add_fee_and_sign()\n\nbob_redeem.show_details()\n{'fee': 0.001,\n 'fee_per_kb': 0.0,\n 'fee_per_kb_text': '0.00000000 MONA / 1 kB',\n 'fee_text': '0.00100000 MONA',\n 'recipient_address': 'MAHnD7u7JD4DPA3R267zcB1xbaaiZrDRmL',\n 'size': 343,\n 'size_text': '343 bytes',\n 'transaction': '0100000001e4f0bb83bc3b52f921ad9d064768ba1702d9ec92befa3529a17e5163c90a11a000000000fd0001483045022100bf0dec5ab03d024147bc26df33a64f2389c4647fc1f9a92e93575cb5f2ff5081022060a54dd5135bc38eb6e75c65ec4e47efa08e7298fed83757db31bd53619a17d501410447408e366d0e979101f776ab10753091b0b62ba9aa609d006263959e030fb2d96e054c1f976a8cddcee5e1a95022cf289be89577ca348c893223d2e648de1abb209a2cfc32611dbd3ac3261cd23622223e85e6c6575852d20e031c1333b9070bc2514c5163a61498ff8f419c57646b3e056514185a97d15a7f086e8876a9141a376f6634e41c22b28bc9ef3336a623717083a46704ef6bdc5ab17576a9142b6a3314e8fcf1f1fd6b4d70b112bd5a192850576888ac000000000160d36002000000001976a9141a376f6634e41c22b28bc9ef3336a623717083a488ac00000000',\n 'transaction_address': '1593f8ac14340e23d629342881e188b848af3dc1b7909791aacde53d48a1e697',\n 'value': 0.4,\n 'value_text': '0.40000000 MONA'}\n\nbob_redeem.publish()\n'1593f8ac14340e23d629342881e188b848af3dc1b7909791aacde53d48a1e697'  https://bchain.info/MONA/tx/1593f8ac14340e23d629342881e188b848af3dc1b7909791aacde53d48a1e697  [ Bob ] should get monacoins just after redeem transaction is published.",
            "title": "11. Second redeem transaction"
        },
        {
            "location": "/usage/#ethereum-testnet",
            "text": "",
            "title": "Ethereum Testnet"
        },
        {
            "location": "/usage/#assumptions_1",
            "text": "Alice wants to buy 0.5 ETH for 1000 Blockbusters Test tokens in Ethereum Kovan Testnet  Bob wants to buy 1000 Blockbusters Test tokens for 0.5 ETH in Ethereum Kovan Testnet  Both Alice and Bob have wallets in Ethereum Kovan network",
            "title": "Assumptions"
        },
        {
            "location": "/usage/#1-setup",
            "text": "Alice should initialize the network object, set her address, private key, amount of tokens to be swapped and the address of the token.  [ Alice ]'s console input:\n    from clove.network import EthereumTestnet  eth_test = EthereumTestnet()\n\naddress = '0x999F348959E611F1E9eab2927c21E88E48e6Ef45'\nprivate_key = 'alice_private_key'\n\ntokens_to_swap = '1000'\ntoken_address = '0x53E546387A0d054e7FF127923254c0a679DA6DBf'  It is also possible to get the token data directly from the network object by the token symbol if the token is supported:  token = eth_test.get_token_by_symbol('BBT')\ntoken_address = token.token_address  Bob should initialize the network object, set his address, private key and amount of ethers to be swapped.  [ Bob ]'s console input:\n    from clove.network import EthereumTestnet  eth_test = EthereumTestnet()\n\naddress = '0xd867f293Ba129629a9f9355fa285B8D3711a9092'\nprivate_key = 'bob_private_key'\n\neth_to_swap = '0.5'",
            "title": "1. Setup"
        },
        {
            "location": "/usage/#2-communication_1",
            "text": "Alice and Bob exchange their wallet addresses.  [ Alice ]'s console input:  bob_address = '0xd867f293Ba129629a9f9355fa285B8D3711a9092'  [ Bob ]'s console input:  alice_address = '0x999F348959E611F1E9eab2927c21E88E48e6Ef45'",
            "title": "2. Communication"
        },
        {
            "location": "/usage/#3-token-approval",
            "text": "To send tokens to an atomic swap contract Alice has to first approve that the tokens she own can be spend by that contract.  approve_transaction = eth_test.approve_token(address, tokens_to_swap, token_address)\napprove_transaction.sign(private_key)\napprove_transaction.show_details()\n\n{'contract_address': '0x7657Ca877Fac31D20528B473162E39B6E152fd2e',\n 'data': '0x095ea7b30000000000000000000000007657ca877fac31d20528b473162e39b6e152fd2e00000000000000000000000000000000000000000000003635c9adc5dea00000',\n 'gasprice': 20000000000,\n 'nonce': 34,\n 'r': 112426775415197512764524506063660144184257199595961926193168166347175765778579,\n 's': 1927313746114385663128009448899947006587692267799486537632890580735710981604,\n 'sender': '0x999f348959e611f1e9eab2927c21e88e48e6ef45',\n 'sender_address': '0x999F348959E611F1E9eab2927c21E88E48e6Ef45',\n 'startgas': 45576,\n 'token_address': '0x53E546387A0d054e7FF127923254c0a679DA6DBf',\n 'transaction_address': '0x40b8d435ff4bfbb202aed75dfc87f64e0d3da3838581b6635ae615e0454bd4fc',\n 'v': 28,\n 'value': Decimal('1000'),\n 'value_text': '1000.000000000000000000 BBT'}\n\napprove_transaction.publish()\n'0x40b8d435ff4bfbb202aed75dfc87f64e0d3da3838581b6635ae615e0454bd4fc'  https://kovan.etherscan.io/tx/0x40b8d435ff4bfbb202aed75dfc87f64e0d3da3838581b6635ae615e0454bd4fc",
            "title": "3. Token approval"
        },
        {
            "location": "/usage/#4-alice-is-initializing-an-atomic-swap-transaction",
            "text": "initial_transaction = eth_test.atomic_swap(\n    address,\n    bob_address,\n    tokens_to_swap,\n    token_address=token_address\n)\ninitial_transaction.sign(private_key)\ninitial_transaction.show_details()\n\n{'contract_address': '0x7657Ca877Fac31D20528B473162E39B6E152fd2e',\n 'data': '0x52f50db7000000000000000000000000000000000000000000000000000000005acde5c48cebcb1af6fa5fddeb091f61f0af1c49a6de9922000000000000000000000000000000000000000000000000d867f293ba129629a9f9355fa285b8d3711a909200000000000000000000000053e546387a0d054e7ff127923254c0a679da6dbf00000000000000000000000000000000000000000000003635c9adc5dea00000',\n 'gas_limit': None,\n 'gasprice': 20000000000,\n 'locktime': datetime.datetime(2018, 4, 11, 10, 39, 0, 535753),\n 'nonce': 35,\n 'r': 81080759208730988867907650750974367955166566527430658028938499115001735694910,\n 'recipient_address': '0xd867f293Ba129629a9f9355fa285B8D3711a9092',\n 'refund_address': '0x999F348959E611F1E9eab2927c21E88E48e6Ef45',\n 's': 25371208205154004938960599477560107420234164093623357637201902103097079815422,\n 'secret': 'c037026e2d0f3901c797d2414df30a4ce700d18055925f416e575635c5c2b7ac',\n 'secret_hash': '8cebcb1af6fa5fddeb091f61f0af1c49a6de9922',\n 'sender': '0x999f348959e611f1e9eab2927c21e88e48e6ef45',\n 'sender_address': '0x999F348959E611F1E9eab2927c21E88E48e6Ef45',\n 'startgas': 300000,\n 'to': '0x7657ca877fac31d20528b473162e39b6e152fd2e',\n 'token_address': '0x53E546387A0d054e7FF127923254c0a679DA6DBf',\n 'transaction_address': '0x4cc2308652423a1b05712def62fe5183dfa507bd033941bdb40b56a258760840',\n 'v': 27,\n 'value': Decimal('1000'),\n 'value_text': '1000.000000000000000000 BBT'}\n\ninitial_transaction.publish()\n'0x4cc2308652423a1b05712def62fe5183dfa507bd033941bdb40b56a258760840'  https://kovan.etherscan.io/tx/0x4cc2308652423a1b05712def62fe5183dfa507bd033941bdb40b56a258760840",
            "title": "4. Alice is initializing an atomic swap transaction"
        },
        {
            "location": "/usage/#5-communication",
            "text": "[ Alice ] sends hers transaction address  0x4cc2308652423a1b05712def62fe5183dfa507bd033941bdb40b56a258760840  to Bob so he can audit created contract.",
            "title": "5. Communication"
        },
        {
            "location": "/usage/#6-contract-audit",
            "text": "[ Bob ] needs to audit the contract in the network it was created in, in our case it's Ethereum Testnet network.\nAnd also at this point Bob should validate if the data returned in the contract is correct.  alice_contract = eth_test.audit_contract('0x4cc2308652423a1b05712def62fe5183dfa507bd033941bdb40b56a258760840')\nalice_contract.show_details()\n\n{'contract_address': '0x7657Ca877Fac31D20528B473162E39B6E152fd2e',\n 'locktime': datetime.datetime(2018, 4, 11, 10, 39),\n 'recipient_address': '0xd867f293Ba129629a9f9355fa285B8D3711a9092',\n 'refund_address': '0x999F348959E611F1E9eab2927c21E88E48e6Ef45',\n 'secret_hash': '8cebcb1af6fa5fddeb091f61f0af1c49a6de9922',\n 'token_address': '0x53E546387A0d054e7FF127923254c0a679DA6DBf',\n 'transaction_address': '0x4cc2308652423a1b05712def62fe5183dfa507bd033941bdb40b56a258760840',\n 'value': Decimal('1000'),\n 'value_text': '1000.000000000000000000 BBT'}",
            "title": "6. Contract audit"
        },
        {
            "location": "/usage/#7-participation",
            "text": "[ Bob ] has to create parallel transaction from point 4 but for 0.5 ETH. We call it  participate_transaction .  participate_transaction = alice_contract.participate(\n    'ETH-TESTNET',\n    address,\n    alice_address,\n    eth_to_swap\n)\n\nparticipate_transaction.sign(private_key)\nparticipate_transaction.show_details()\n\n{'contract_address': '0x9F7e5402ed0858Ea0C5914D44B900A42C89547B8',\n 'data': '0xeb8ae1ed000000000000000000000000000000000000000000000000000000005acca1d68cebcb1af6fa5fddeb091f61f0af1c49a6de9922000000000000000000000000000000000000000000000000999f348959e611f1e9eab2927c21e88e48e6ef45',\n 'gas_limit': 126221,\n 'gasprice': 20000000000,\n 'locktime': datetime.datetime(2018, 4, 10, 11, 36, 54, 224171),\n 'nonce': 18,\n 'r': 10117394961799586109544014237169747431096329877057063230289022533801441532789,\n 'recipient_address': '0x999F348959E611F1E9eab2927c21E88E48e6Ef45',\n 'refund_address': '0xd867f293Ba129629a9f9355fa285B8D3711a9092',\n 's': 34556783084242874049490624129921763496945955547455400337813271950949674389178,\n 'secret_hash': '8cebcb1af6fa5fddeb091f61f0af1c49a6de9922',\n 'sender': '0xd867f293ba129629a9f9355fa285b8d3711a9092',\n 'sender_address': '0xd867f293Ba129629a9f9355fa285B8D3711a9092',\n 'startgas': 126221,\n 'to': '0x9f7e5402ed0858ea0c5914d44b900a42c89547b8',\n 'transaction_address': '0xc9b2bf9b67dcfea39dea71b3416922adfcae23f6410be7d109fb9df2e1c0695f',\n 'v': 28,\n 'value': Decimal('0.5'),\n 'value_text': '0.500000000000000000 ETH'}\n\nparticipate_transaction.publish()\n'0xc9b2bf9b67dcfea39dea71b3416922adfcae23f6410be7d109fb9df2e1c0695f'  https://kovan.etherscan.io/tx/0xc9b2bf9b67dcfea39dea71b3416922adfcae23f6410be7d109fb9df2e1c0695f",
            "title": "7. Participation"
        },
        {
            "location": "/usage/#8-communication",
            "text": "[ Bob ] sends his transaction address  0xc9b2bf9b67dcfea39dea71b3416922adfcae23f6410be7d109fb9df2e1c0695f  to Alice.",
            "title": "8. Communication"
        },
        {
            "location": "/usage/#9-contract-audit",
            "text": "[ Alice ] needs to audit the contract in the network it was created in, in our case it's Ethereum Testnet network.\nAnd also at this point Alice should validate if the data returned in the contract is correct.  bob_contract = eth_test.audit_contract(\n    '0xc9b2bf9b67dcfea39dea71b3416922adfcae23f6410be7d109fb9df2e1c0695f'\n)\nbob_contract.show_details()\n\n{'contract_address': '0x9F7e5402ed0858Ea0C5914D44B900A42C89547B8',\n 'locktime': datetime.datetime(2018, 4, 10, 11, 36, 54),\n 'recipient_address': '0x999F348959E611F1E9eab2927c21E88E48e6Ef45',\n 'refund_address': '0xd867f293Ba129629a9f9355fa285B8D3711a9092',\n 'secret_hash': '8cebcb1af6fa5fddeb091f61f0af1c49a6de9922',\n 'transaction_address': '0xc9b2bf9b67dcfea39dea71b3416922adfcae23f6410be7d109fb9df2e1c0695f',\n 'value': Decimal('0.5'),\n 'value_text': '0.500000000000000000 ETH'}",
            "title": "9. Contract audit"
        },
        {
            "location": "/usage/#10-first-redeem-transaction",
            "text": "[ Alice ] can now collect coins she wants, thus she creates redeem transaction.  alice_redeem = bob_contract.redeem(secret=initial_transaction.show_details()['secret'])\nalice_redeem.sign(private_key)\n\nalice_redeem.show_details()\n\n{'data': '0xeda1122cc037026e2d0f3901c797d2414df30a4ce700d18055925f416e575635c5c2b7ac',\n 'gasprice': 20000000000,\n 'hash': '0x80addbc1b1ff0cf32949c78cde0dc4347f1a81e7f510fd266aa934523c92c2c1',\n 'nonce': 36,\n 'r': 59319998726546023363151651169655572196637192178004534224886682741537229136353,\n 's': 49667378228500740364784037188336222900603288337407062594007817473604371090679,\n 'sender': '0x999f348959e611f1e9eab2927c21e88e48e6ef45',\n 'startgas': 100000,\n 'to': '0x9f7e5402ed0858ea0c5914d44b900a42c89547b8',\n 'v': 28,\n 'value': Decimal('0.5'),\n 'value_text': '0.500000000000000000 ETH'}\n\nalice_redeem.publish()\n'0x80addbc1b1ff0cf32949c78cde0dc4347f1a81e7f510fd266aa934523c92c2c1'  https://kovan.etherscan.io/tx/0x80addbc1b1ff0cf32949c78cde0dc4347f1a81e7f510fd266aa934523c92c2c1  [ Alice ] will get ether just after redeem transaction is published.",
            "title": "10. First redeem transaction"
        },
        {
            "location": "/usage/#11-secret-capture",
            "text": "[ Bob ] should extract the secret from the redeem transaction. For this operation ( find_redeem_transaction ) an Etherscan API key is required -  read more  alice_redeem_tx_hash = bob_contract.find_redeem_transaction()\nsecret = eth_test.extract_secret_from_redeem_transaction(alice_redeem_tx_hash)",
            "title": "11. Secret capture"
        },
        {
            "location": "/usage/#12-second-redeem-transaction",
            "text": "[ Bob ] can now collect tokens he wants, thus he creates redeem transaction.  bob_redeem = alice_contract.redeem(secret)\nbob_redeem.sign(private_key)\n\nbob_redeem.show_details()\n\n{'data': '0xeda1122cc037026e2d0f3901c797d2414df30a4ce700d18055925f416e575635c5c2b7ac',\n 'gasprice': 20000000000,\n 'hash': '0x4fd41289b816f6122e59a0759bd10441ead75d550562f4b3aad2fddc56eb3274',\n 'nonce': 19,\n 'r': 65751206609566246138168255228214505208801025362644939199208252280848271690158,\n 's': 45667062183625152271430540771543035424773489029161348648874675951038677865195,\n 'sender': '0xd867f293ba129629a9f9355fa285b8d3711a9092',\n 'startgas': 100000,\n 'to': '0x7657ca877fac31d20528b473162e39b6e152fd2e',\n 'v': 27,\n 'value': Decimal('1000'),\n 'value_text': '1000.000000000000000000 BBT'}\n\nbob_redeem.publish()\n'0x4fd41289b816f6122e59a0759bd10441ead75d550562f4b3aad2fddc56eb3274'  https://kovan.etherscan.io/tx/0x4fd41289b816f6122e59a0759bd10441ead75d550562f4b3aad2fddc56eb3274  [ Bob ] will get BBT tokens just after redeem transaction is published.",
            "title": "12. Second redeem transaction"
        },
        {
            "location": "/refund/",
            "text": "Transaction refunds\n\n\nAtomic swaps work because if any party does not comply with the previously agreed upon terms, the transaction can revert using a refund mechanism.\n\n\nHere are some examples of transaction refunds.\n\n\nI Initial transaction refund\n\n\nAlice created and published such transaction:\n\n\n{'contract': '63a820b02f390cf0c6d445f8f3a730b2e9fce5dff10da4b47a523d2fd7bf73d8a7a7028876a91485c0522f6e23beb11cc3d066cd20ed732648a4e66704b75db25ab17576a914621f617c765c3caa5ce1bb67f6a3e51382b8da296888ac',\n 'contract_address': 'M93y8ouRm8YVez5RBnZi779tgBDPwbdehB',\n 'contract_transaction': '01000000015322ad6edd25cc9f2f7dbec73b4d1b123b8abe7fc0e4acb1ec6bf112e1b5b9a5010000008b483045022100c4efbe3a31061df474ec8230428b6f615bc97c0e625a747f22eeeffac6efdbce02200946d6638d7d68086ba478c2280d6669934d63f09233482afcd8634937af63b701410431ab07973bbb5dbc6b7422fc7322abb5df15f77694c0b15b09a325996af47ddd887c7eaa72c656a71fcb333068956de7b3e2f15deaafc1d9285d779ca1b6a3f6000000000290ca04000000000017a9140ca29b3066cde980ffe06268f8bf1902f57ab4dd878f5c0f00000000001976a914621f617c765c3caa5ce1bb67f6a3e51382b8da2988ac00000000',\n 'fee': 0.00055184,\n 'fee_per_kb': 0.00215564,\n 'fee_per_kb_text': '0.00215564 LTC / 1 kB',\n 'fee_text': '0.00055184 LTC',\n 'locktime': datetime.datetime(2018, 3, 21, 14, 27, 19, 372402),\n 'recipient_address': 'LXRAXRgPo84p58746zaBXUFFevCTYBPxgb',\n 'refund_address': 'LUAn5PWmsPavgz32mGkqsUuAKncftS37Jq',\n 'secret': '376d4e7a476d576b70554a57504f32676569727654687463574a44356e664d72314d35744b50637743374f7a777a436257366c76514541497442316d66764733',\n 'secret_hash': 'b02f390cf0c6d445f8f3a730b2e9fce5dff10da4b47a523d2fd7bf73d8a7a702',\n 'size': 256,\n 'size_text': '256 bytes',\n 'transaction_address': 'abbcd57c53576985783c91f5b9cf2109c5a1f16cdfb35480e14a832fb78bfeb7',\n 'value': 0.00314,\n 'value_text': '0.00314000 LTC'}\n\n\n\nShe was waiting for the response from Bob for a day but she did not receive any,\nso she decided to refund the money from the blockchain:\n\n\n1. Get a wallet from the newtork\n\n\nfrom clove.network import Litecoin\n\nalice_ltc_wallet = Litecoin.get_wallet(private_key='aliceprivatekey') # provide real key\nalice_ltc_wallet.address\n'LUAn5PWmsPavgz32mGkqsUuAKncftS37Jq'\n\n\n\n2. Create refund transaction\n\n\nfrom clove.network.bitcoin.contract import BitcoinContract\n\nltc_network = Litecoin()\n\nalice_contract = BitcoinContract(\n    network=ltc_network,\n    contract='63a820b02f390cf0c6d445f8f3a730b2e9fce5dff10da4b47a523d2fd7bf73d8a7a7028876a91485c0522f6e23beb11cc3d066cd20ed732648a4e66704b75db25ab17576a914621f617c765c3caa5ce1bb67f6a3e51382b8da296888ac',\n    raw_transaction='01000000015322ad6edd25cc9f2f7dbec73b4d1b123b8abe7fc0e4acb1ec6bf112e1b5b9a5010000008b483045022100c4efbe3a31061df474ec8230428b6f615bc97c0e625a747f22eeeffac6efdbce02200946d6638d7d68086ba478c2280d6669934d63f09233482afcd8634937af63b701410431ab07973bbb5dbc6b7422fc7322abb5df15f77694c0b15b09a325996af47ddd887c7eaa72c656a71fcb333068956de7b3e2f15deaafc1d9285d779ca1b6a3f6000000000290ca04000000000017a9140ca29b3066cde980ffe06268f8bf1902f57ab4dd878f5c0f00000000001976a914621f617c765c3caa5ce1bb67f6a3e51382b8da2988ac00000000'\n)\n\nrefund_transaction = alice_contract.refund(alice_ltc_wallet)\nRuntimeError: This contract is still valid! It can't be refunded until 2018-03-21 14:27:19 UTC.\n\n\n\nOops! Something went wrong! Contract is still valid! Alice was a bit impatient, wasn't she?\n\n\nInitial transaction contract is set to be \nvalid for 48 hours\n.\n\n\nOkey! It is past 2018-03-21 14:27:19 UTC, so Alice is free to create a refund transaction!\n\n\nrefund_transaction = alice_contract.refund(alice_ltc_wallet)\n\n\n\n3. Sign and publish refund transaction\n\n\nrefund_transaction.add_fee_and_sign()\n\nrefund_transaction.show_details()\n{'fee': 0.00069549,\n 'fee_per_kb': 0.00217341,\n 'fee_per_kb_text': '0.00217341 LTC / 1 kB',\n 'fee_text': '0.00069549 LTC',\n 'recipient_address': 'LUAn5PWmsPavgz32mGkqsUuAKncftS37Jq',\n 'size': 320,\n 'size_text': '320 bytes',\n 'transaction': '0100000001b7fe8bb72f834ae18054b3df6cf1a1c50921cfb9f5913c78856957537cd5bcab00000000eb4830450221008a1974702c78cdf9067af92d57643641b9b99388fa86a35ab6121348f75b2f7a02202cff4e470e3088fbbde26c71150641428511dd6188e9fdd4ec29f507bde8f50401410431ab07973bbb5dbc6b7422fc7322abb5df15f77694c0b15b09a325996af47ddd887c7eaa72c656a71fcb333068956de7b3e2f15deaafc1d9285d779ca1b6a3f6004c5d63a820b02f390cf0c6d445f8f3a730b2e9fce5dff10da4b47a523d2fd7bf73d8a7a7028876a91485c0522f6e23beb11cc3d066cd20ed732648a4e66704b75db25ab17576a914621f617c765c3caa5ce1bb67f6a3e51382b8da296888ac0000000001e3ba0300000000001976a914621f617c765c3caa5ce1bb67f6a3e51382b8da2988acb75db25a',\n 'transaction_address': 'e42d94615792f60eab5503d7dc05a80d9cd394f958af83c8af862af1246e049d',\n 'value': 0.00314,\n 'value_text': '0.00314000 LTC'}\n\n refund_transaction.publish()\n\n\n\n4. Voil\u00e0! Alice should get her litecoins back. You can check it for example in a blockcypher.\n\n\nII Participate transaction refund\n\n\nBob created and published such participating transaction:\n\n\n{'contract': '63a820b02f390cf0c6d445f8f3a730b2e9fce5dff10da4b47a523d2fd7bf73d8a7a7028876a9141a376f6634e41c22b28bc9ef3336a623717083a467047d0eb15ab17576a9142b6a3314e8fcf1f1fd6b4d70b112bd5a192850576888ac',\n 'contract_address': '3F5em2T4pJd5ParPjs2QenpGL7QDvK2Wyc',\n 'contract_transaction': '0100000001daee049a9f9822743a0691ae4f51768e3b4431f5f6abe08da8d8f7afd048e6ff010000008b483045022100c316eb713d282337807de04cdbd67327d78b5deb850f831f0f9aa5c06aa6ab7902203777ed3b22ab88927b92a70b621f44342a6159f10f5a3f456a9d8393e06e9e440141044fbe9cf6ef9bf4a13a693ee1d431eb700a592e8097619e0cfe82aff2a5c231e7154e464e4ec94201007b403b6de9a5819b0bc31eef0741c4fe6e932bca6d9cca0000000002405dc6000000000017a91492e189107196d882ed245bf224940a21a23c5c0187c0fb6e0c000000001976a9142b6a3314e8fcf1f1fd6b4d70b112bd5a1928505788ac00000000',\n 'fee': 0.001,\n 'fee_per_kb': 0.0,\n 'fee_per_kb_text': '0.00000000 MONA / 1 kB',\n 'fee_text': '0.00100000 MONA',\n 'locktime': datetime.datetime(2018, 3, 20, 14, 37, 1, 516711),\n 'recipient_address': 'MAHnD7u7JD4DPA3R267zcB1xbaaiZrDRmL',\n 'refund_address': 'MBriWYyfWNdrAmycN5otoUDWDMrdFK33DQ',\n 'secret': '',\n 'secret_hash': 'b02f390cf0c6d445f8f3a730b2e9fce5dff10da4b47a523d2fd7bf73d8a7a702',\n 'size': 256,\n 'size_text': '256 bytes',\n 'transaction_address': '5d920e7093b2f0ac94cb1c13a42a79ed1c1290fcc4155d15a123d69b1afe05d2',\n 'value': 0.13,\n 'value_text': '0.13000000 MONA'}\n\n\n\nAlice didn't redeem the transaction, so no secret key was published. Bob needed to get his monacoins back.\n\n\nThe process is parallel as in the \ninitial transaction\n.\n\n\n1. Get a wallet from the newtork\n\n\nfrom clove.network import Monacoin\n\nbob_mona_wallet = Monacoin.get_wallet(private_key='bobprivatekey') # provide real key\nbob_mona_wallet.address\n'MBriWYyfWNdrAmycN5otoUDWDMrdFK33DQ'\n\n\n\n2. Create refund transaction\n\n\nfrom clove.network.bitcoin.contract import BitcoinContract\n\nmona_network = Monacoin()\n\nbob_contract = BitcoinContract(\n    network=mona_network,\n    contract='63a820b02f390cf0c6d445f8f3a730b2e9fce5dff10da4b47a523d2fd7bf73d8a7a7028876a9141a376f6634e41c22b28bc9ef3336a623717083a467047d0eb15ab17576a9142b6a3314e8fcf1f1fd6b4d70b112bd5a192850576888ac',\n    raw_transaction='0100000001daee049a9f9822743a0691ae4f51768e3b4431f5f6abe08da8d8f7afd048e6ff010000008b483045022100c316eb713d282337807de04cdbd67327d78b5deb850f831f0f9aa5c06aa6ab7902203777ed3b22ab88927b92a70b621f44342a6159f10f5a3f456a9d8393e06e9e440141044fbe9cf6ef9bf4a13a693ee1d431eb700a592e8097619e0cfe82aff2a5c231e7154e464e4ec94201007b403b6de9a5819b0bc31eef0741c4fe6e932bca6d9cca0000000002405dc6000000000017a91492e189107196d882ed245bf224940a21a23c5c0187c0fb6e0c000000001976a9142b6a3314e8fcf1f1fd6b4d70b112bd5a1928505788ac00000000'\n)\n\nrefund_transaction = bob_contract.refund(bob_mona_wallet)\nRuntimeError: This contract is still valid! It can't be refunded until 2018-03-20 14:37:01 UTC.\n\n\n\nOops! Something went wrong! Contract is still valid! Bob was a bit impatient, wasn't he?\n\n\nParticipate transaction contract is set to be \nvalid for 24 hours\n.\n\n\nOkey! It is past 2018-03-20 14:37:01 UTC, so Bob is free to create a refund transaction!\n\n\nrefund_transaction = bob_contract.refund(bob_mona_wallet)\n\n\n\n3. Sign and publish refund transaction\n\n\nrefund_transaction.fee = 0.001  # As monacoin is not in the blockcypher we need to add fee manually\nrefund_transaction.add_fee_and_sign()\n\n{'fee': 0.001,\n 'fee_per_kb': 0.0,\n 'fee_per_kb_text': '0.00000000 MONA / 1 kB',\n 'fee_text': '0.00100000 MONA',\n 'recipient_address': 'MBriWYyfWNdrAmycN5otoUDWDMrdFK33DQ',\n 'size': 319,\n 'size_text': '319 bytes',\n 'transaction': '0100000001d205fe1a9bd623a1155d15c4fc90121ced792aa4131ccb94acf0b293700e925d00000000ea4730440220112731937e6e0a0f5c366e667961ba8d41bc6fd980055c0c911f6dff3cb857d0022033751626806881058120118915a0a7f20280f53952460fff0e2b4c547cc5a7690141044fbe9cf6ef9bf4a13a693ee1d431eb700a592e8097619e0cfe82aff2a5c231e7154e464e4ec94201007b403b6de9a5819b0bc31eef0741c4fe6e932bca6d9cca004c5d63a820b02f390cf0c6d445f8f3a730b2e9fce5dff10da4b47a523d2fd7bf73d8a7a7028876a9141a376f6634e41c22b28bc9ef3336a623717083a467047d0eb15ab17576a9142b6a3314e8fcf1f1fd6b4d70b112bd5a192850576888ac0000000001a0d6c400000000001976a9142b6a3314e8fcf1f1fd6b4d70b112bd5a1928505788ac7d0eb15a',\n 'transaction_address': '3582597e1c30759027d9e53843f79528e0f4f0ddc458449f9bb824dabb53ba14',\n 'value': 0.13,\n 'value_text': '0.13000000 MONA'}\n\n refund_transaction.publish()\n '3582597e1c30759027d9e53843f79528e0f4f0ddc458449f9bb824dabb53ba14'\n\n\n\n4. Voil\u00e0! Bob should get his monacoins back. You can check it for example \nhere\n.",
            "title": "Refund"
        },
        {
            "location": "/refund/#transaction-refunds",
            "text": "Atomic swaps work because if any party does not comply with the previously agreed upon terms, the transaction can revert using a refund mechanism.",
            "title": "Transaction refunds"
        },
        {
            "location": "/refund/#here-are-some-examples-of-transaction-refunds",
            "text": "",
            "title": "Here are some examples of transaction refunds."
        },
        {
            "location": "/refund/#i-initial-transaction-refund",
            "text": "Alice created and published such transaction:  {'contract': '63a820b02f390cf0c6d445f8f3a730b2e9fce5dff10da4b47a523d2fd7bf73d8a7a7028876a91485c0522f6e23beb11cc3d066cd20ed732648a4e66704b75db25ab17576a914621f617c765c3caa5ce1bb67f6a3e51382b8da296888ac',\n 'contract_address': 'M93y8ouRm8YVez5RBnZi779tgBDPwbdehB',\n 'contract_transaction': '01000000015322ad6edd25cc9f2f7dbec73b4d1b123b8abe7fc0e4acb1ec6bf112e1b5b9a5010000008b483045022100c4efbe3a31061df474ec8230428b6f615bc97c0e625a747f22eeeffac6efdbce02200946d6638d7d68086ba478c2280d6669934d63f09233482afcd8634937af63b701410431ab07973bbb5dbc6b7422fc7322abb5df15f77694c0b15b09a325996af47ddd887c7eaa72c656a71fcb333068956de7b3e2f15deaafc1d9285d779ca1b6a3f6000000000290ca04000000000017a9140ca29b3066cde980ffe06268f8bf1902f57ab4dd878f5c0f00000000001976a914621f617c765c3caa5ce1bb67f6a3e51382b8da2988ac00000000',\n 'fee': 0.00055184,\n 'fee_per_kb': 0.00215564,\n 'fee_per_kb_text': '0.00215564 LTC / 1 kB',\n 'fee_text': '0.00055184 LTC',\n 'locktime': datetime.datetime(2018, 3, 21, 14, 27, 19, 372402),\n 'recipient_address': 'LXRAXRgPo84p58746zaBXUFFevCTYBPxgb',\n 'refund_address': 'LUAn5PWmsPavgz32mGkqsUuAKncftS37Jq',\n 'secret': '376d4e7a476d576b70554a57504f32676569727654687463574a44356e664d72314d35744b50637743374f7a777a436257366c76514541497442316d66764733',\n 'secret_hash': 'b02f390cf0c6d445f8f3a730b2e9fce5dff10da4b47a523d2fd7bf73d8a7a702',\n 'size': 256,\n 'size_text': '256 bytes',\n 'transaction_address': 'abbcd57c53576985783c91f5b9cf2109c5a1f16cdfb35480e14a832fb78bfeb7',\n 'value': 0.00314,\n 'value_text': '0.00314000 LTC'}  She was waiting for the response from Bob for a day but she did not receive any,\nso she decided to refund the money from the blockchain:",
            "title": "I Initial transaction refund"
        },
        {
            "location": "/refund/#1-get-a-wallet-from-the-newtork",
            "text": "from clove.network import Litecoin\n\nalice_ltc_wallet = Litecoin.get_wallet(private_key='aliceprivatekey') # provide real key\nalice_ltc_wallet.address\n'LUAn5PWmsPavgz32mGkqsUuAKncftS37Jq'",
            "title": "1. Get a wallet from the newtork"
        },
        {
            "location": "/refund/#2-create-refund-transaction",
            "text": "from clove.network.bitcoin.contract import BitcoinContract\n\nltc_network = Litecoin()\n\nalice_contract = BitcoinContract(\n    network=ltc_network,\n    contract='63a820b02f390cf0c6d445f8f3a730b2e9fce5dff10da4b47a523d2fd7bf73d8a7a7028876a91485c0522f6e23beb11cc3d066cd20ed732648a4e66704b75db25ab17576a914621f617c765c3caa5ce1bb67f6a3e51382b8da296888ac',\n    raw_transaction='01000000015322ad6edd25cc9f2f7dbec73b4d1b123b8abe7fc0e4acb1ec6bf112e1b5b9a5010000008b483045022100c4efbe3a31061df474ec8230428b6f615bc97c0e625a747f22eeeffac6efdbce02200946d6638d7d68086ba478c2280d6669934d63f09233482afcd8634937af63b701410431ab07973bbb5dbc6b7422fc7322abb5df15f77694c0b15b09a325996af47ddd887c7eaa72c656a71fcb333068956de7b3e2f15deaafc1d9285d779ca1b6a3f6000000000290ca04000000000017a9140ca29b3066cde980ffe06268f8bf1902f57ab4dd878f5c0f00000000001976a914621f617c765c3caa5ce1bb67f6a3e51382b8da2988ac00000000'\n)\n\nrefund_transaction = alice_contract.refund(alice_ltc_wallet)\nRuntimeError: This contract is still valid! It can't be refunded until 2018-03-21 14:27:19 UTC.  Oops! Something went wrong! Contract is still valid! Alice was a bit impatient, wasn't she?  Initial transaction contract is set to be  valid for 48 hours .  Okey! It is past 2018-03-21 14:27:19 UTC, so Alice is free to create a refund transaction!  refund_transaction = alice_contract.refund(alice_ltc_wallet)",
            "title": "2. Create refund transaction"
        },
        {
            "location": "/refund/#3-sign-and-publish-refund-transaction",
            "text": "refund_transaction.add_fee_and_sign()\n\nrefund_transaction.show_details()\n{'fee': 0.00069549,\n 'fee_per_kb': 0.00217341,\n 'fee_per_kb_text': '0.00217341 LTC / 1 kB',\n 'fee_text': '0.00069549 LTC',\n 'recipient_address': 'LUAn5PWmsPavgz32mGkqsUuAKncftS37Jq',\n 'size': 320,\n 'size_text': '320 bytes',\n 'transaction': '0100000001b7fe8bb72f834ae18054b3df6cf1a1c50921cfb9f5913c78856957537cd5bcab00000000eb4830450221008a1974702c78cdf9067af92d57643641b9b99388fa86a35ab6121348f75b2f7a02202cff4e470e3088fbbde26c71150641428511dd6188e9fdd4ec29f507bde8f50401410431ab07973bbb5dbc6b7422fc7322abb5df15f77694c0b15b09a325996af47ddd887c7eaa72c656a71fcb333068956de7b3e2f15deaafc1d9285d779ca1b6a3f6004c5d63a820b02f390cf0c6d445f8f3a730b2e9fce5dff10da4b47a523d2fd7bf73d8a7a7028876a91485c0522f6e23beb11cc3d066cd20ed732648a4e66704b75db25ab17576a914621f617c765c3caa5ce1bb67f6a3e51382b8da296888ac0000000001e3ba0300000000001976a914621f617c765c3caa5ce1bb67f6a3e51382b8da2988acb75db25a',\n 'transaction_address': 'e42d94615792f60eab5503d7dc05a80d9cd394f958af83c8af862af1246e049d',\n 'value': 0.00314,\n 'value_text': '0.00314000 LTC'}\n\n refund_transaction.publish()",
            "title": "3. Sign and publish refund transaction"
        },
        {
            "location": "/refund/#4-voila-alice-should-get-her-litecoins-back-you-can-check-it-for-example-in-a-blockcypher",
            "text": "",
            "title": "4. Voil\u00e0! Alice should get her litecoins back. You can check it for example in a blockcypher."
        },
        {
            "location": "/refund/#ii-participate-transaction-refund",
            "text": "Bob created and published such participating transaction:  {'contract': '63a820b02f390cf0c6d445f8f3a730b2e9fce5dff10da4b47a523d2fd7bf73d8a7a7028876a9141a376f6634e41c22b28bc9ef3336a623717083a467047d0eb15ab17576a9142b6a3314e8fcf1f1fd6b4d70b112bd5a192850576888ac',\n 'contract_address': '3F5em2T4pJd5ParPjs2QenpGL7QDvK2Wyc',\n 'contract_transaction': '0100000001daee049a9f9822743a0691ae4f51768e3b4431f5f6abe08da8d8f7afd048e6ff010000008b483045022100c316eb713d282337807de04cdbd67327d78b5deb850f831f0f9aa5c06aa6ab7902203777ed3b22ab88927b92a70b621f44342a6159f10f5a3f456a9d8393e06e9e440141044fbe9cf6ef9bf4a13a693ee1d431eb700a592e8097619e0cfe82aff2a5c231e7154e464e4ec94201007b403b6de9a5819b0bc31eef0741c4fe6e932bca6d9cca0000000002405dc6000000000017a91492e189107196d882ed245bf224940a21a23c5c0187c0fb6e0c000000001976a9142b6a3314e8fcf1f1fd6b4d70b112bd5a1928505788ac00000000',\n 'fee': 0.001,\n 'fee_per_kb': 0.0,\n 'fee_per_kb_text': '0.00000000 MONA / 1 kB',\n 'fee_text': '0.00100000 MONA',\n 'locktime': datetime.datetime(2018, 3, 20, 14, 37, 1, 516711),\n 'recipient_address': 'MAHnD7u7JD4DPA3R267zcB1xbaaiZrDRmL',\n 'refund_address': 'MBriWYyfWNdrAmycN5otoUDWDMrdFK33DQ',\n 'secret': '',\n 'secret_hash': 'b02f390cf0c6d445f8f3a730b2e9fce5dff10da4b47a523d2fd7bf73d8a7a702',\n 'size': 256,\n 'size_text': '256 bytes',\n 'transaction_address': '5d920e7093b2f0ac94cb1c13a42a79ed1c1290fcc4155d15a123d69b1afe05d2',\n 'value': 0.13,\n 'value_text': '0.13000000 MONA'}  Alice didn't redeem the transaction, so no secret key was published. Bob needed to get his monacoins back.  The process is parallel as in the  initial transaction .",
            "title": "II Participate transaction refund"
        },
        {
            "location": "/refund/#1-get-a-wallet-from-the-newtork_1",
            "text": "from clove.network import Monacoin\n\nbob_mona_wallet = Monacoin.get_wallet(private_key='bobprivatekey') # provide real key\nbob_mona_wallet.address\n'MBriWYyfWNdrAmycN5otoUDWDMrdFK33DQ'",
            "title": "1. Get a wallet from the newtork"
        },
        {
            "location": "/refund/#2-create-refund-transaction_1",
            "text": "from clove.network.bitcoin.contract import BitcoinContract\n\nmona_network = Monacoin()\n\nbob_contract = BitcoinContract(\n    network=mona_network,\n    contract='63a820b02f390cf0c6d445f8f3a730b2e9fce5dff10da4b47a523d2fd7bf73d8a7a7028876a9141a376f6634e41c22b28bc9ef3336a623717083a467047d0eb15ab17576a9142b6a3314e8fcf1f1fd6b4d70b112bd5a192850576888ac',\n    raw_transaction='0100000001daee049a9f9822743a0691ae4f51768e3b4431f5f6abe08da8d8f7afd048e6ff010000008b483045022100c316eb713d282337807de04cdbd67327d78b5deb850f831f0f9aa5c06aa6ab7902203777ed3b22ab88927b92a70b621f44342a6159f10f5a3f456a9d8393e06e9e440141044fbe9cf6ef9bf4a13a693ee1d431eb700a592e8097619e0cfe82aff2a5c231e7154e464e4ec94201007b403b6de9a5819b0bc31eef0741c4fe6e932bca6d9cca0000000002405dc6000000000017a91492e189107196d882ed245bf224940a21a23c5c0187c0fb6e0c000000001976a9142b6a3314e8fcf1f1fd6b4d70b112bd5a1928505788ac00000000'\n)\n\nrefund_transaction = bob_contract.refund(bob_mona_wallet)\nRuntimeError: This contract is still valid! It can't be refunded until 2018-03-20 14:37:01 UTC.  Oops! Something went wrong! Contract is still valid! Bob was a bit impatient, wasn't he?  Participate transaction contract is set to be  valid for 24 hours .  Okey! It is past 2018-03-20 14:37:01 UTC, so Bob is free to create a refund transaction!  refund_transaction = bob_contract.refund(bob_mona_wallet)",
            "title": "2. Create refund transaction"
        },
        {
            "location": "/refund/#3-sign-and-publish-refund-transaction_1",
            "text": "refund_transaction.fee = 0.001  # As monacoin is not in the blockcypher we need to add fee manually\nrefund_transaction.add_fee_and_sign()\n\n{'fee': 0.001,\n 'fee_per_kb': 0.0,\n 'fee_per_kb_text': '0.00000000 MONA / 1 kB',\n 'fee_text': '0.00100000 MONA',\n 'recipient_address': 'MBriWYyfWNdrAmycN5otoUDWDMrdFK33DQ',\n 'size': 319,\n 'size_text': '319 bytes',\n 'transaction': '0100000001d205fe1a9bd623a1155d15c4fc90121ced792aa4131ccb94acf0b293700e925d00000000ea4730440220112731937e6e0a0f5c366e667961ba8d41bc6fd980055c0c911f6dff3cb857d0022033751626806881058120118915a0a7f20280f53952460fff0e2b4c547cc5a7690141044fbe9cf6ef9bf4a13a693ee1d431eb700a592e8097619e0cfe82aff2a5c231e7154e464e4ec94201007b403b6de9a5819b0bc31eef0741c4fe6e932bca6d9cca004c5d63a820b02f390cf0c6d445f8f3a730b2e9fce5dff10da4b47a523d2fd7bf73d8a7a7028876a9141a376f6634e41c22b28bc9ef3336a623717083a467047d0eb15ab17576a9142b6a3314e8fcf1f1fd6b4d70b112bd5a192850576888ac0000000001a0d6c400000000001976a9142b6a3314e8fcf1f1fd6b4d70b112bd5a1928505788ac7d0eb15a',\n 'transaction_address': '3582597e1c30759027d9e53843f79528e0f4f0ddc458449f9bb824dabb53ba14',\n 'value': 0.13,\n 'value_text': '0.13000000 MONA'}\n\n refund_transaction.publish()\n '3582597e1c30759027d9e53843f79528e0f4f0ddc458449f9bb824dabb53ba14'",
            "title": "3. Sign and publish refund transaction"
        },
        {
            "location": "/refund/#4-voila-bob-should-get-his-monacoins-back-you-can-check-it-for-example-here",
            "text": "",
            "title": "4. Voil\u00e0! Bob should get his monacoins back. You can check it for example here."
        },
        {
            "location": "/api/clove.network.base/",
            "text": "clove.network.base\n\n\n\nBaseNetwork\n\n\n\nBaseNetwork(self, /, *args, **kwargs)\n\n\n\n\nClass for shared properties and methods for Bitcoin and Ethereum network.\n\ndefault_symbol\n\n\nReturns first symbol for networks with multiple symbols.\n\nnetworks\n\n\ndict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)\n\nsymbols\n\n\ntuple() -> empty tuple\ntuple(iterable) -> tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\ntest_networks\n\n\ndict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)\n\ntestnet\n\n\nbool(x) -> bool\n\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.\n\nis_test_network\n\n\nBaseNetwork.is_test_network() -> bool\n\n\n\n\nReturning True if the network is a testnet.\n\nget_network_by_symbol\n\n\nBaseNetwork.get_network_by_symbol(symbol:str)\n\n\n\n\nReturns network instance by its symbol.\n\nset_symbol_mapping\n\n\nBaseNetwork.set_symbol_mapping()\n\n\n\n\nCreates symbol-instance mapping.",
            "title": "clove.network.base"
        },
        {
            "location": "/api/clove.network.bitcoin/",
            "text": "clove.network.bitcoin.base\n\n\n\nBitcoinBaseNetwork\n\n\n\nBitcoinBaseNetwork(self, /, *args, **kwargs)\n\n\n\n\nbase58_prefixes\n\n\n\ndict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)\n\nbitcoin_based\n\n\nbool(x) -> bool\n\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.\n\nblacklist_nodes\n\n\ndict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)\n\nmessage_start\n\n\nbytes(iterable_of_ints) -> bytes\nbytes(string, encoding[, errors]) -> bytes\nbytes(bytes_or_buffer) -> immutable copy of bytes_or_buffer\nbytes(int) -> bytes object of size given by the parameter initialized with null bytes\nbytes() -> empty bytes object\n\n\nConstruct an immutable array of bytes from:\n  - an iterable yielding integers in range(256)\n  - a text string encoded using the specified encoding\n  - any object implementing the buffer API.\n  - an integer\n\nnodes\n\n\ntuple() -> empty tuple\ntuple(iterable) -> tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\nseeds\n\n\ntuple() -> empty tuple\ntuple(iterable) -> tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\nsymbols\n\n\ntuple() -> empty tuple\ntuple(iterable) -> tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\nget_current_fee_per_kb\n\n\nBitcoinBaseNetwork.get_current_fee_per_kb() -> Union[float, NoneType]\n\n\n\n\nReturns current fee based on last transactions.",
            "title": "clove.network.bitcoin.base"
        },
        {
            "location": "/api/clove.network.ethereum/",
            "text": "clove.network.ethereum.base\n\n\n\nEthereumBaseNetwork\n\n\n\nEthereumBaseNetwork(self)\n\n\n\n\nClass with all the necessary ETH network information and transaction building.\n\n\nethereum_based\n\n\n\nbool(x) -> bool\n\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.\n\nsymbols\n\n\ntuple() -> empty tuple\ntuple(iterable) -> tuple initialized from iterable's items\n\n\nIf the argument is a tuple, the return value is the same object.\n\ntokens\n\n\nlist() -> new empty list\nlist(iterable) -> new list initialized from iterable's items\n\natomic_swap\n\n\nEthereumBaseNetwork.atomic_swap(self, sender_address:str, recipient_address:str, value:Union[str, decimal.Decimal], secret_hash:str=None, token_address:str=None) -> clove.network.ethereum.transaction.EthereumAtomicSwapTransaction\n\n\n\n\nReturn EthereumAtomicSwapTransaction object,\nwhich initiate and build transaction beetwen sender and recipient\n\nget_token_by_attribute\n\n\nEthereumBaseNetwork.get_token_by_attribute(name:str, value:str) -> Union[clove.network.ethereum_based.Token, NoneType]\n\n\n\n\nGet a token by provided attribute and its value\n\nget_token_from_token_contract\n\n\nEthereumBaseNetwork.get_token_from_token_contract(self, token_address:str) -> Union[clove.network.ethereum_based.Token, NoneType]\n\n\n\n\nGetting information from token contract and creating Token.\nSmart contract is taken based on provided address\n\nget_token_by_symbol\n\n\nEthereumBaseNetwork.get_token_by_symbol(symbol:str)\n\n\n\n\nGet raw_transaction by encoding Transaction object token by provided symbol\n\nget_raw_transaction\n\n\nEthereumBaseNetwork.get_raw_transaction(transaction:ethereum.transactions.Transaction) -> str\n\n\n\n\nGet raw_transaction by encoding Transaction object\n\ndeserialize_raw_transaction\n\n\nEthereumBaseNetwork.deserialize_raw_transaction(raw_transaction:str) -> Union[ethereum.transactions.Transaction, NoneType]\n\n\n\n\nMethod to deserialize raw method.\nIt's deserializing raw_transaction and returns Transaction object\n\nsign_raw_transaction\n\n\nEthereumBaseNetwork.sign_raw_transaction(raw_transaction:str, private_key:str) -> str\n\n\n\n\nMethod to sign raw transactions\n\npublish\n\n\nEthereumBaseNetwork.publish(self, transaction:Union[str, ethereum.transactions.Transaction]) -> Union[str, NoneType]\n\n\n\n\nMethod to publish transaction\n\nget_wallet\n\n\nEthereumBaseNetwork.get_wallet(private_key=None)\n\n\n\n\nReturns Ethereum wallter object, which allows to keep address and priv key",
            "title": "clove.network.ethereum.base"
        }
    ]
}